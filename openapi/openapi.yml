components:
  schemas:
    Aggregate:
      description: Enumeration of aggregate values
      enum:
      - ok
      - test
      - staging
      - 'no'
      title: Aggregate
    Attributes:
      description: "Members of the attributes object (\"attributes\") represent information\
        \ about the resource object in which it's defined.\nThe keys for Attributes\
        \ MUST NOT be:\n    relationships\n    links\n    id\n    type"
      properties: {}
      title: Attributes
      type: object
    AvailableApiVersion:
      description: A JSON object containing information about an available API version
      properties:
        url:
          description: A string specifying a versioned base URL that MUST adhere to
            the rules in section Base URL
          format: uri
          maxLength: 65536
          minLength: 1
          pattern: .+/v[0-1](\.[0-9]+)*/?$
          title: Url
          type: string
        version:
          description: 'A string containing the full version number of the API served
            at that versioned base URL.

            The version number string MUST NOT be prefixed by, e.g., ''v''.

            Examples: `1.0.0`, `1.0.0-rc.2`.'
          pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          title: Version
          type: string
      required:
      - url
      - version
      title: AvailableApiVersion
      type: object
    BaseInfoAttributes:
      description: Attributes for Base URL Info endpoint
      properties:
        api_version:
          description: 'Presently used full version of the OPTIMADE API.

            The version number string MUST NOT be prefixed by, e.g., "v".

            Examples: `1.0.0`, `1.0.0-rc.2`.'
          pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          title: Api Version
          type: string
        available_api_versions:
          description: A list of dictionaries of available API versions at other base
            URLs
          items:
            $ref: '#/components/schemas/AvailableApiVersion'
          title: Available Api Versions
          type: array
        available_endpoints:
          description: List of available endpoints (i.e., the string to be appended
            to the versioned base URL).
          items:
            type: string
          title: Available Endpoints
          type: array
        entry_types_by_format:
          additionalProperties:
            items:
              type: string
            type: array
          description: Available entry endpoints as a function of output formats.
          title: Entry Types By Format
          type: object
        formats:
          default:
          - json
          description: List of available output formats.
          items:
            type: string
          title: Formats
          type: array
        is_index:
          default: false
          description: If true, this is an index meta-database base URL (see section
            Index Meta-Database). If this member is not provided, the client MUST
            assume this is not an index meta-database base URL (i.e., the default
            is for `is_index` to be `false`).
          title: Is Index
          type: boolean
      required:
      - api_version
      - available_api_versions
      - available_endpoints
      - entry_types_by_format
      title: BaseInfoAttributes
      type: object
    BaseInfoResource:
      description: Resource objects appear in a JSON API document to represent resources.
      properties:
        attributes:
          $ref: '#/components/schemas/BaseInfoAttributes'
        id:
          pattern: ^/$
          title: Id
          type: string
        links:
          allOf:
          - $ref: '#/components/schemas/ResourceLinks'
          description: a links object containing links related to the resource.
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: a meta object containing non-standard meta-information about
            a resource that can not be represented as an attribute or relationship.
          title: Meta
        relationships:
          allOf:
          - $ref: '#/components/schemas/Relationships'
          description: '[Relationships object](https://jsonapi.org/format/1.0/#document-resource-object-relationships)

            describing relationships between the resource and other JSON API resources.'
          title: Relationships
        type:
          pattern: ^info$
          title: Type
          type: string
      required:
      - id
      - type
      - attributes
      title: BaseInfoResource
      type: object
    BaseRelationshipMeta:
      description: Specific meta field for base relationship resource
      properties:
        description:
          description: OPTIONAL human-readable description of the relationship.
          title: Description
          type: string
      required:
      - description
      title: BaseRelationshipMeta
      type: object
    BaseRelationshipResource:
      description: Minimum requirements to represent a relationship resource
      properties:
        id:
          description: Resource ID
          title: Id
          type: string
        meta:
          allOf:
          - $ref: '#/components/schemas/BaseRelationshipMeta'
          description: Relationship meta field. MUST contain 'description' if supplied.
          title: Meta
        type:
          description: Resource type
          title: Type
          type: string
      required:
      - id
      - type
      title: BaseRelationshipResource
      type: object
    DataType:
      description: 'Optimade Data Types


        See the section "Data types" in the OPTIMADE API specification for more information.'
      enum:
      - string
      - integer
      - float
      - boolean
      - timestamp
      - list
      - dictionary
      - unknown
      title: DataType
    DatabaseCreate:
      description: 'Model for creating new LinksResources representing `/databases`
        resources in the

        MongoDB.


        Required fields:


        - `name`

        - `base_url`


        Original required fields for a

        [`LinksResourceAttributes`](https://www.optimade.org/optimade-python-tools/api_reference/models/links/#optimade.models.links.LinksResourceAttributes)

        model:


        - `name`

        - `description`

        - `link_type`'
      properties:
        aggregate:
          allOf:
          - $ref: '#/components/schemas/Aggregate'
          default: ok
          description: 'A string indicating whether a client that is following links
            to aggregate results from different OPTIMADE implementations should follow
            this link or not.

            This flag SHOULD NOT be indicated for links where `link_type` is not `child`.


            If not specified, clients MAY assume that the value is `ok`.

            If specified, and the value is anything different than `ok`, the client
            MUST assume that the server is suggesting not to follow the link during
            aggregation by default (also if the value is not among the known ones,
            in case a future specification adds new accepted values).


            Specific values indicate the reason why the server is providing the suggestion.

            A client MAY follow the link anyway if it has reason to do so (e.g., if
            the client is looking for all test databases, it MAY follow the links
            marked with `aggregate`=`test`).


            If specified, it MUST be one of the values listed in section Link Aggregate
            Options.'
          title: Aggregate
        base_url:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          title: Base Url
        description:
          title: Description
          type: string
        homepage:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: JSON API links object, pointing to a homepage URL for this
            implementation.
          title: Homepage
        id:
          title: Id
          type: string
        immutable_id:
          description: "The entry's immutable ID (e.g., an UUID). This is important\
            \ for databases having preferred IDs that point to \"the latest version\"\
            \ of a record, but still offer access to older variants. This ID maps\
            \ to the version-specific record, in case it changes in the future.\n\n\
            - **Type**: string.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ OPTIONAL support in implementations, i.e., MAY be `null`.\n    - **Query**:\
            \ MUST be a queryable property with support for all mandatory filter features.\n\
            \n- **Examples**:\n    - `\"8bd3e750-b477-41a0-9b11-3a799f21b44f\"`\n\
            \    - `\"fjeiwoj,54;@=%<>#32\"` (Strings that are not URL-safe are allowed.)"
          title: Immutable Id
          type: string
        last_modified:
          format: date-time
          title: Last Modified
          type: string
        link_type:
          allOf:
          - $ref: '#/components/schemas/LinkType'
          description: 'The type of the linked relation.

            MUST be one of these values: ''child'', ''root'', ''external'', ''providers''.'
          title: Link Type
        name:
          description: Human-readable name for the OPTIMADE API implementation, e.g.,
            for use in clients to show the name to the end-user.
          title: Name
          type: string
        no_aggregate_reason:
          description: 'An OPTIONAL human-readable string indicating the reason for
            suggesting not to aggregate results following the link.

            It SHOULD NOT be present if `aggregate`=`ok`.'
          title: No Aggregate Reason
          type: string
      required:
      - name
      - base_url
      title: DatabaseCreate
      type: object
    DatabasesResponse:
      description: "Successful response for `GET /databases`\n\nThis model is essentially\
        \ equal to\n[`LinksResponse`](https://www.optimade.org/optimade-python-tools/api_reference/models/responses/#optimade.models.responses.LinksResponse)\n\
        with the exception of the `data\xB4 field's description."
      properties:
        data:
          description: 'List of unique OPTIMADE links resource objects.

            These links resource objects represents OPTIMADE databases that can be
            used for queries in gateways.'
          items:
            $ref: '#/components/schemas/LinksResource'
          title: Data
          type: array
          uniqueItems: true
        errors:
          description: A list of unique errors
          items:
            $ref: '#/components/schemas/Error'
          title: Errors
          type: array
          uniqueItems: true
        included:
          anyOf:
          - items:
              $ref: '#/components/schemas/optimade__models__entries__EntryResource'
            type: array
          - items:
              type: object
            type: array
          title: Included
          uniqueItems: true
        jsonapi:
          allOf:
          - $ref: '#/components/schemas/JsonApi'
          description: Information about the JSON API used
          title: Jsonapi
        links:
          allOf:
          - $ref: '#/components/schemas/ToplevelLinks'
          description: Links associated with the primary data or errors
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/ResponseMeta'
          description: A meta object containing non-standard information
          title: Meta
      required:
      - data
      - meta
      title: DatabasesResponse
      type: object
    DatabasesResponseSingle:
      description: Successful response for `POST /databases` and `GET /databases/{database_id}`
      properties:
        data:
          allOf:
          - $ref: '#/components/schemas/LinksResource'
          description: 'A unique OPTIMADE links resource object.

            The OPTIMADE links resource object has just been created or found according
            to the specific query parameter(s) or URL id.

            It represents an OPTIMADE database that can be used for queries in gateways.'
          title: Data
        errors:
          description: A list of unique errors
          items:
            $ref: '#/components/schemas/Error'
          title: Errors
          type: array
          uniqueItems: true
        included:
          anyOf:
          - items:
              $ref: '#/components/schemas/optimade__models__entries__EntryResource'
            type: array
          - items:
              type: object
            type: array
          title: Included
          uniqueItems: true
        jsonapi:
          allOf:
          - $ref: '#/components/schemas/JsonApi'
          description: Information about the JSON API used
          title: Jsonapi
        links:
          allOf:
          - $ref: '#/components/schemas/ToplevelLinks'
          description: Links associated with the primary data or errors
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/ResponseMeta'
          description: A meta object containing non-standard information
          title: Meta
      required:
      - data
      - meta
      title: DatabasesResponseSingle
      type: object
    EndpointEntryType:
      description: 'Entry endpoint resource types, mapping to their pydantic models
        from the

        `optimade` package.'
      enum:
      - references
      - structures
      title: EndpointEntryType
    EntryInfoProperty:
      properties:
        description:
          description: A human-readable description of the entry property
          title: Description
          type: string
        sortable:
          description: 'Defines whether the entry property can be used for sorting
            with the "sort" parameter.

            If the entry listing endpoint supports sorting, this key MUST be present
            for sortable properties with value `true`.'
          title: Sortable
          type: boolean
        type:
          allOf:
          - $ref: '#/components/schemas/DataType'
          description: 'The type of the property''s value.

            This MUST be any of the types defined in the Data types section.

            For the purpose of compatibility with future versions of this specification,
            a client MUST accept values that are not `string` values specifying any
            of the OPTIMADE Data types, but MUST then also disregard the `type` field.

            Note, if the value is a nested type, only the outermost type should be
            reported.

            E.g., for the entry resource `structures`, the `species` property is defined
            as a list of dictionaries, hence its `type` value would be `list`.'
          title: Type
        unit:
          description: 'The physical unit of the entry property.

            This MUST be a valid representation of units according to version 2.1
            of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html).

            It is RECOMMENDED that non-standard (non-SI) units are described in the
            description for the property.'
          title: Unit
          type: string
      required:
      - description
      title: EntryInfoProperty
      type: object
    EntryInfoResource:
      properties:
        description:
          description: Description of the entry.
          title: Description
          type: string
        formats:
          description: List of output formats available for this type of entry.
          items:
            type: string
          title: Formats
          type: array
        output_fields_by_format:
          additionalProperties:
            items:
              type: string
            type: array
          description: Dictionary of available output fields for this entry type,
            where the keys are the values of the `formats` list and the values are
            the keys of the `properties` dictionary.
          title: Output Fields By Format
          type: object
        properties:
          additionalProperties:
            $ref: '#/components/schemas/EntryInfoProperty'
          description: A dictionary describing queryable properties for this entry
            type, where each key is a property name.
          title: Properties
          type: object
      required:
      - formats
      - description
      - properties
      - output_fields_by_format
      title: EntryInfoResource
      type: object
    EntryInfoResponse:
      description: errors are not allowed
      properties:
        data:
          allOf:
          - $ref: '#/components/schemas/EntryInfoResource'
          description: OPTIMADE information for an entry endpoint.
          title: Data
        errors:
          description: A list of unique errors
          items:
            $ref: '#/components/schemas/Error'
          title: Errors
          type: array
          uniqueItems: true
        included:
          description: A list of unique included resources
          items:
            $ref: '#/components/schemas/Resource'
          title: Included
          type: array
          uniqueItems: true
        jsonapi:
          allOf:
          - $ref: '#/components/schemas/JsonApi'
          description: Information about the JSON API used
          title: Jsonapi
        links:
          allOf:
          - $ref: '#/components/schemas/ToplevelLinks'
          description: Links associated with the primary data or errors
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/ResponseMeta'
          description: A meta object containing non-standard information
          title: Meta
      required:
      - data
      - meta
      title: EntryInfoResponse
      type: object
    EntryRelationships:
      description: This model wraps the JSON API Relationships to include type-specific
        top level keys.
      properties:
        references:
          allOf:
          - $ref: '#/components/schemas/ReferenceRelationship'
          description: Object containing links to relationships with entries of the
            `references` type.
          title: References
        structures:
          allOf:
          - $ref: '#/components/schemas/StructureRelationship'
          description: Object containing links to relationships with entries of the
            `structures` type.
          title: Structures
      title: EntryRelationships
      type: object
    EntryResourceAttributes:
      description: Contains key-value pairs representing the entry's properties.
      properties:
        immutable_id:
          description: "The entry's immutable ID (e.g., an UUID). This is important\
            \ for databases having preferred IDs that point to \"the latest version\"\
            \ of a record, but still offer access to older variants. This ID maps\
            \ to the version-specific record, in case it changes in the future.\n\n\
            - **Type**: string.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ OPTIONAL support in implementations, i.e., MAY be `null`.\n    - **Query**:\
            \ MUST be a queryable property with support for all mandatory filter features.\n\
            \n- **Examples**:\n    - `\"8bd3e750-b477-41a0-9b11-3a799f21b44f\"`\n\
            \    - `\"fjeiwoj,54;@=%<>#32\"` (Strings that are not URL-safe are allowed.)"
          title: Immutable Id
          type: string
        last_modified:
          description: "Date and time representing when the entry was last modified.\n\
            \n- **Type**: timestamp.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.\n\
            \    - **Query**: MUST be a queryable property with support for all mandatory\
            \ filter features.\n    - **Response**: REQUIRED in the response unless\
            \ the query parameter `response_fields` is present and does not include\
            \ this property.\n\n- **Example**:\n    - As part of JSON response format:\
            \ `\"2007-04-05T14:30:20Z\"` (i.e., encoded as an [RFC 3339 Internet Date/Time\
            \ Format](https://tools.ietf.org/html/rfc3339#section-5.6) string.)"
          format: date-time
          title: Last Modified
          type: string
      required:
      - last_modified
      title: EntryResourceAttributes
      type: object
    EntryResponseMany:
      description: errors are not allowed
      properties:
        data:
          anyOf:
          - items:
              $ref: '#/components/schemas/optimade__models__entries__EntryResource'
            type: array
          - items:
              type: object
            type: array
          title: Data
          uniqueItems: true
        errors:
          description: A list of unique errors
          items:
            $ref: '#/components/schemas/Error'
          title: Errors
          type: array
          uniqueItems: true
        included:
          anyOf:
          - items:
              $ref: '#/components/schemas/optimade__models__entries__EntryResource'
            type: array
          - items:
              type: object
            type: array
          title: Included
          uniqueItems: true
        jsonapi:
          allOf:
          - $ref: '#/components/schemas/JsonApi'
          description: Information about the JSON API used
          title: Jsonapi
        links:
          allOf:
          - $ref: '#/components/schemas/ToplevelLinks'
          description: Links associated with the primary data or errors
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/ResponseMeta'
          description: A meta object containing non-standard information
          title: Meta
      required:
      - data
      - meta
      title: EntryResponseMany
      type: object
    Error:
      description: An error response
      properties:
        code:
          description: an application-specific error code, expressed as a string value.
          title: Code
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of
            the problem.
          title: Detail
          type: string
        id:
          description: A unique identifier for this particular occurrence of the problem.
          title: Id
          type: string
        links:
          allOf:
          - $ref: '#/components/schemas/ErrorLinks'
          description: A links object storing about
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: a meta object containing non-standard meta-information about
            the error.
          title: Meta
        source:
          allOf:
          - $ref: '#/components/schemas/ErrorSource'
          description: An object containing references to the source of the error
          title: Source
        status:
          description: the HTTP status code applicable to this problem, expressed
            as a string value.
          title: Status
          type: string
        title:
          description: A short, human-readable summary of the problem. It **SHOULD
            NOT** change from occurrence to occurrence of the problem, except for
            purposes of localization.
          title: Title
          type: string
      title: Error
      type: object
    ErrorLinks:
      description: A Links object specific to Error objects
      properties:
        about:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: A link that leads to further details about this particular
            occurrence of the problem.
          title: About
      title: ErrorLinks
      type: object
    ErrorResponse:
      description: errors MUST be present and data MUST be skipped
      properties:
        data:
          anyOf:
          - $ref: '#/components/schemas/Resource'
          - items:
              $ref: '#/components/schemas/Resource'
            type: array
          description: Outputted Data
          title: Data
          uniqueItems: true
        errors:
          description: A list of OPTIMADE-specific JSON API error objects, where the
            field detail MUST be present.
          items:
            $ref: '#/components/schemas/OptimadeError'
          title: Errors
          type: array
          uniqueItems: true
        included:
          description: A list of unique included resources
          items:
            $ref: '#/components/schemas/Resource'
          title: Included
          type: array
          uniqueItems: true
        jsonapi:
          allOf:
          - $ref: '#/components/schemas/JsonApi'
          description: Information about the JSON API used
          title: Jsonapi
        links:
          allOf:
          - $ref: '#/components/schemas/ToplevelLinks'
          description: Links associated with the primary data or errors
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/ResponseMeta'
          description: A meta object containing non-standard information.
          title: Meta
      required:
      - meta
      - errors
      title: ErrorResponse
      type: object
    ErrorSource:
      description: an object containing references to the source of the error
      properties:
        parameter:
          description: a string indicating which URI query parameter caused the error.
          title: Parameter
          type: string
        pointer:
          description: a JSON Pointer [RFC6901] to the associated entity in the request
            document [e.g. "/data" for a primary data object, or "/data/attributes/title"
            for a specific attribute].
          title: Pointer
          type: string
      title: ErrorSource
      type: object
    GatewayCreate:
      description: Model for creating new Gateway resources in the MongoDB
      properties:
        database_ids:
          description: A unique list of database IDs for registered databases.
          items:
            type: string
          title: Database Ids
          type: array
          uniqueItems: true
        databases:
          items:
            $ref: '#/components/schemas/LinksResource'
          title: Databases
          type: array
        id:
          description: "An entry's ID as defined in section Definition of Terms.\n\
            \n- **Type**: string.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ MUST be supported by all implementations, MUST NOT be `null`.\n    -\
            \ **Query**: MUST be a queryable property with support for all mandatory\
            \ filter\n      features.\n    - **Response**: REQUIRED in the response.\n\
            \    - **Gateway-specific**: MUST NOT contain a forward slash (`/`).\n\
            \n- **Examples**:\n    - `\"db_1234567\"`\n    - `\"cod_2000000\"`\n \
            \   - `\"cod_2000000@1234567\"`\n    - `\"nomad_L1234567890\"`\n    -\
            \ `\"42\"`"
          pattern: ^[^/]*$
          title: Id
          type: string
        immutable_id:
          description: "The entry's immutable ID (e.g., an UUID). This is important\
            \ for databases having preferred IDs that point to \"the latest version\"\
            \ of a record, but still offer access to older variants. This ID maps\
            \ to the version-specific record, in case it changes in the future.\n\n\
            - **Type**: string.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ OPTIONAL support in implementations, i.e., MAY be `null`.\n    - **Query**:\
            \ MUST be a queryable property with support for all mandatory filter features.\n\
            \n- **Examples**:\n    - `\"8bd3e750-b477-41a0-9b11-3a799f21b44f\"`\n\
            \    - `\"fjeiwoj,54;@=%<>#32\"` (Strings that are not URL-safe are allowed.)"
          title: Immutable Id
          type: string
        last_modified:
          format: date-time
          title: Last Modified
          type: string
      title: GatewayCreate
      type: object
    GatewayQueryResponse:
      description: Response from a Gateway Query.
      properties:
        data:
          additionalProperties:
            anyOf:
            - items:
                $ref: '#/components/schemas/optimade_gateway__models__queries__EntryResource'
              type: array
            - items:
                type: object
              type: array
          description: Outputted Data.
          title: Data
          type: object
          uniqueItems: true
        errors:
          default: []
          description: A list of OPTIMADE-specific JSON API error objects, where the
            field detail MUST be present.
          items:
            $ref: '#/components/schemas/OptimadeError'
          title: Errors
          type: array
          uniqueItems: true
        included:
          anyOf:
          - items:
              $ref: '#/components/schemas/optimade_gateway__models__queries__EntryResource'
            type: array
          - items:
              type: object
            type: array
          title: Included
          uniqueItems: true
        jsonapi:
          allOf:
          - $ref: '#/components/schemas/JsonApi'
          description: Information about the JSON API used
          title: Jsonapi
        links:
          allOf:
          - $ref: '#/components/schemas/ToplevelLinks'
          description: Links associated with the primary data or errors
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/ResponseMeta'
          description: A meta object containing non-standard information.
          title: Meta
      required:
      - data
      - meta
      title: GatewayQueryResponse
      type: object
    GatewayResource:
      description: 'OPTIMADE gateway


        A resource representing a dynamic collection of OPTIMADE databases.

        The gateway can be treated as any other OPTIMADE gateway, but the entries
        are an

        aggregate of multiple databases. The `id` of each aggregated resource will
        reflect

        the originating database.'
      properties:
        attributes:
          $ref: '#/components/schemas/GatewayResourceAttributes'
        id:
          description: "An entry's ID as defined in section Definition of Terms.\n\
            \n- **Type**: string.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ MUST be supported by all implementations, MUST NOT be `null`.\n    -\
            \ **Query**: MUST be a queryable property with support for all mandatory\
            \ filter\n      features.\n    - **Response**: REQUIRED in the response.\n\
            \    - **Gateway-specific**: MUST NOT contain a forward slash (`/`).\n\
            \n- **Examples**:\n    - `\"db_1234567\"`\n    - `\"cod_2000000\"`\n \
            \   - `\"cod_2000000@1234567\"`\n    - `\"nomad_L1234567890\"`\n    -\
            \ `\"42\"`"
          pattern: ^[^/]*$
          title: Id
          type: string
        links:
          allOf:
          - $ref: '#/components/schemas/ResourceLinks'
          description: a links object containing links related to the resource.
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: a meta object containing non-standard meta-information about
            a resource that can not be represented as an attribute or relationship.
          title: Meta
        relationships:
          allOf:
          - $ref: '#/components/schemas/EntryRelationships'
          description: 'A dictionary containing references to other entries according
            to the description in section Relationships encoded as [JSON API Relationships](https://jsonapi.org/format/1.0/#document-resource-object-relationships).

            The OPTIONAL human-readable description of the relationship MAY be provided
            in the `description` field inside the `meta` dictionary of the JSON API
            resource identifier object.'
          title: Relationships
        type:
          description: The name of the type of an entry.
          pattern: ^gateways$
          title: Type
          type: string
      required:
      - id
      - type
      - attributes
      title: GatewayResource
      type: object
    GatewayResourceAttributes:
      description: Attributes for an OPTIMADE gateway
      properties:
        databases:
          description: List of databases (OPTIMADE 'links') to be queried in this
            gateway.
          items:
            $ref: '#/components/schemas/LinksResource'
          title: Databases
          type: array
        immutable_id:
          description: "The entry's immutable ID (e.g., an UUID). This is important\
            \ for databases having preferred IDs that point to \"the latest version\"\
            \ of a record, but still offer access to older variants. This ID maps\
            \ to the version-specific record, in case it changes in the future.\n\n\
            - **Type**: string.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ OPTIONAL support in implementations, i.e., MAY be `null`.\n    - **Query**:\
            \ MUST be a queryable property with support for all mandatory filter features.\n\
            \n- **Examples**:\n    - `\"8bd3e750-b477-41a0-9b11-3a799f21b44f\"`\n\
            \    - `\"fjeiwoj,54;@=%<>#32\"` (Strings that are not URL-safe are allowed.)"
          title: Immutable Id
          type: string
        last_modified:
          description: "Date and time representing when the entry was last modified.\n\
            \n- **Type**: timestamp.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.\n\
            \    - **Query**: MUST be a queryable property with support for all mandatory\
            \ filter features.\n    - **Response**: REQUIRED in the response unless\
            \ the query parameter `response_fields` is present and does not include\
            \ this property.\n\n- **Example**:\n    - As part of JSON response format:\
            \ `\"2007-04-05T14:30:20Z\"` (i.e., encoded as an [RFC 3339 Internet Date/Time\
            \ Format](https://tools.ietf.org/html/rfc3339#section-5.6) string.)"
          format: date-time
          title: Last Modified
          type: string
      required:
      - last_modified
      - databases
      title: GatewayResourceAttributes
      type: object
    GatewaysResponse:
      description: Successful response for `GET /gateways`
      properties:
        data:
          description: List of unique OPTIMADE gateway resource objects.
          items:
            $ref: '#/components/schemas/GatewayResource'
          title: Data
          type: array
          uniqueItems: true
        errors:
          description: A list of unique errors
          items:
            $ref: '#/components/schemas/Error'
          title: Errors
          type: array
          uniqueItems: true
        included:
          anyOf:
          - items:
              $ref: '#/components/schemas/optimade__models__entries__EntryResource'
            type: array
          - items:
              type: object
            type: array
          title: Included
          uniqueItems: true
        jsonapi:
          allOf:
          - $ref: '#/components/schemas/JsonApi'
          description: Information about the JSON API used
          title: Jsonapi
        links:
          allOf:
          - $ref: '#/components/schemas/ToplevelLinks'
          description: Links associated with the primary data or errors
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/ResponseMeta'
          description: A meta object containing non-standard information
          title: Meta
      required:
      - data
      - meta
      title: GatewaysResponse
      type: object
    GatewaysResponseSingle:
      description: Successful response for `POST /gateways` and `GET /gateways/{gateway_id}`.
      properties:
        data:
          allOf:
          - $ref: '#/components/schemas/GatewayResource'
          description: 'A unique OPTIMADE gateway resource object.

            The OPTIMADE gateway resource object has just been created or found according
            to the specific query parameter(s) or URL id.'
          title: Data
        errors:
          description: A list of unique errors
          items:
            $ref: '#/components/schemas/Error'
          title: Errors
          type: array
          uniqueItems: true
        included:
          anyOf:
          - items:
              $ref: '#/components/schemas/optimade__models__entries__EntryResource'
            type: array
          - items:
              type: object
            type: array
          title: Included
          uniqueItems: true
        jsonapi:
          allOf:
          - $ref: '#/components/schemas/JsonApi'
          description: Information about the JSON API used
          title: Jsonapi
        links:
          allOf:
          - $ref: '#/components/schemas/ToplevelLinks'
          description: Links associated with the primary data or errors
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/ResponseMeta'
          description: A meta object containing non-standard information
          title: Meta
      required:
      - data
      - meta
      title: GatewaysResponseSingle
      type: object
    Implementation:
      description: Information on the server implementation
      properties:
        homepage:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links)
            pointing to the homepage of the implementation.
          title: Homepage
        issue_tracker:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links)
            pointing to the implementation's issue tracker.
          title: Issue Tracker
        maintainer:
          allOf:
          - $ref: '#/components/schemas/ImplementationMaintainer'
          description: A dictionary providing details about the maintainer of the
            implementation.
          title: Maintainer
        name:
          description: name of the implementation
          title: Name
          type: string
        source_url:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: A [JSON API links object](http://jsonapi.org/format/1.0/#document-links)
            pointing to the implementation source, either downloadable archive or
            version control system.
          title: Source Url
        version:
          description: version string of the current implementation
          title: Version
          type: string
      title: Implementation
      type: object
    ImplementationMaintainer:
      description: Details about the maintainer of the implementation
      properties:
        email:
          description: the maintainer's email address
          format: email
          title: Email
          type: string
      required:
      - email
      title: ImplementationMaintainer
      type: object
    InfoResponse:
      description: errors are not allowed
      properties:
        data:
          allOf:
          - $ref: '#/components/schemas/BaseInfoResource'
          description: The implementations /info data.
          title: Data
        errors:
          description: A list of unique errors
          items:
            $ref: '#/components/schemas/Error'
          title: Errors
          type: array
          uniqueItems: true
        included:
          description: A list of unique included resources
          items:
            $ref: '#/components/schemas/Resource'
          title: Included
          type: array
          uniqueItems: true
        jsonapi:
          allOf:
          - $ref: '#/components/schemas/JsonApi'
          description: Information about the JSON API used
          title: Jsonapi
        links:
          allOf:
          - $ref: '#/components/schemas/ToplevelLinks'
          description: Links associated with the primary data or errors
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/ResponseMeta'
          description: A meta object containing non-standard information
          title: Meta
      required:
      - data
      - meta
      title: InfoResponse
      type: object
    JsonApi:
      description: An object describing the server's implementation
      properties:
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: Non-standard meta information
          title: Meta
        version:
          default: '1.0'
          description: Version of the json API used
          title: Version
          type: string
      title: JsonApi
      type: object
    Link:
      description: 'A link **MUST** be represented as either: a string containing
        the link''s URL or a link object.'
      properties:
        href:
          description: "a string containing the link\u2019s URL."
          format: uri
          maxLength: 65536
          minLength: 1
          title: Href
          type: string
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: a meta object containing non-standard meta-information about
            the link.
          title: Meta
      required:
      - href
      title: Link
      type: object
    LinkType:
      description: Enumeration of link_type values
      enum:
      - child
      - root
      - external
      - providers
      title: LinkType
    LinksResource:
      description: A Links endpoint resource object
      properties:
        attributes:
          allOf:
          - $ref: '#/components/schemas/LinksResourceAttributes'
          description: A dictionary containing key-value pairs representing the Links
            resource's properties.
          title: Attributes
        id:
          description: "An entry's ID as defined in section Definition of Terms.\n\
            \n- **Type**: string.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ MUST be supported by all implementations, MUST NOT be `null`.\n    -\
            \ **Query**: MUST be a queryable property with support for all mandatory\
            \ filter features.\n    - **Response**: REQUIRED in the response.\n\n\
            - **Examples**:\n    - `\"db/1234567\"`\n    - `\"cod/2000000\"`\n   \
            \ - `\"cod/2000000@1234567\"`\n    - `\"nomad/L1234567890\"`\n    - `\"\
            42\"`"
          title: Id
          type: string
        links:
          allOf:
          - $ref: '#/components/schemas/ResourceLinks'
          description: a links object containing links related to the resource.
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: a meta object containing non-standard meta-information about
            a resource that can not be represented as an attribute or relationship.
          title: Meta
        relationships:
          allOf:
          - $ref: '#/components/schemas/EntryRelationships'
          description: 'A dictionary containing references to other entries according
            to the description in section Relationships encoded as [JSON API Relationships](https://jsonapi.org/format/1.0/#document-resource-object-relationships).

            The OPTIONAL human-readable description of the relationship MAY be provided
            in the `description` field inside the `meta` dictionary of the JSON API
            resource identifier object.'
          title: Relationships
        type:
          description: These objects are described in detail in the section Links
            Endpoint
          pattern: ^links$
          title: Type
          type: string
      required:
      - id
      - type
      - attributes
      title: LinksResource
      type: object
    LinksResourceAttributes:
      description: Links endpoint resource object attributes
      properties:
        aggregate:
          allOf:
          - $ref: '#/components/schemas/Aggregate'
          default: ok
          description: 'A string indicating whether a client that is following links
            to aggregate results from different OPTIMADE implementations should follow
            this link or not.

            This flag SHOULD NOT be indicated for links where `link_type` is not `child`.


            If not specified, clients MAY assume that the value is `ok`.

            If specified, and the value is anything different than `ok`, the client
            MUST assume that the server is suggesting not to follow the link during
            aggregation by default (also if the value is not among the known ones,
            in case a future specification adds new accepted values).


            Specific values indicate the reason why the server is providing the suggestion.

            A client MAY follow the link anyway if it has reason to do so (e.g., if
            the client is looking for all test databases, it MAY follow the links
            marked with `aggregate`=`test`).


            If specified, it MUST be one of the values listed in section Link Aggregate
            Options.'
          title: Aggregate
        base_url:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: JSON API links object, pointing to the base URL for this implementation
          title: Base Url
        description:
          description: Human-readable description for the OPTIMADE API implementation,
            e.g., for use in clients to show a description to the end-user.
          title: Description
          type: string
        homepage:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: JSON API links object, pointing to a homepage URL for this
            implementation
          title: Homepage
        link_type:
          allOf:
          - $ref: '#/components/schemas/LinkType'
          description: 'The type of the linked relation.

            MUST be one of these values: ''child'', ''root'', ''external'', ''providers''.'
          title: Link Type
        name:
          description: Human-readable name for the OPTIMADE API implementation, e.g.,
            for use in clients to show the name to the end-user.
          title: Name
          type: string
        no_aggregate_reason:
          description: 'An OPTIONAL human-readable string indicating the reason for
            suggesting not to aggregate results following the link.

            It SHOULD NOT be present if `aggregate`=`ok`.'
          title: No Aggregate Reason
          type: string
      required:
      - name
      - description
      - base_url
      - homepage
      - link_type
      title: LinksResourceAttributes
      type: object
    LinksResponse:
      description: errors are not allowed
      properties:
        data:
          anyOf:
          - items:
              $ref: '#/components/schemas/LinksResource'
            type: array
          - items:
              type: object
            type: array
          description: List of unique OPTIMADE links resource objects.
          title: Data
          uniqueItems: true
        errors:
          description: A list of unique errors
          items:
            $ref: '#/components/schemas/Error'
          title: Errors
          type: array
          uniqueItems: true
        included:
          anyOf:
          - items:
              $ref: '#/components/schemas/optimade__models__entries__EntryResource'
            type: array
          - items:
              type: object
            type: array
          title: Included
          uniqueItems: true
        jsonapi:
          allOf:
          - $ref: '#/components/schemas/JsonApi'
          description: Information about the JSON API used
          title: Jsonapi
        links:
          allOf:
          - $ref: '#/components/schemas/ToplevelLinks'
          description: Links associated with the primary data or errors
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/ResponseMeta'
          description: A meta object containing non-standard information
          title: Meta
      required:
      - data
      - meta
      title: LinksResponse
      type: object
    Meta:
      description: Non-standard meta-information that can not be represented as an
        attribute or relationship.
      properties: {}
      title: Meta
      type: object
    OptimadeError:
      description: detail MUST be present
      properties:
        code:
          description: an application-specific error code, expressed as a string value.
          title: Code
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of
            the problem.
          title: Detail
          type: string
        id:
          description: A unique identifier for this particular occurrence of the problem.
          title: Id
          type: string
        links:
          allOf:
          - $ref: '#/components/schemas/ErrorLinks'
          description: A links object storing about
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: a meta object containing non-standard meta-information about
            the error.
          title: Meta
        source:
          allOf:
          - $ref: '#/components/schemas/ErrorSource'
          description: An object containing references to the source of the error
          title: Source
        status:
          description: the HTTP status code applicable to this problem, expressed
            as a string value.
          title: Status
          type: string
        title:
          description: A short, human-readable summary of the problem. It **SHOULD
            NOT** change from occurrence to occurrence of the problem, except for
            purposes of localization.
          title: Title
          type: string
      required:
      - detail
      title: OptimadeError
      type: object
    OptimadeQueryParameters:
      description: Common OPTIMADE entry listing endpoint query parameters.
      properties:
        email_address:
          default: ''
          description: 'An email address of the user making the request.

            The email SHOULD be that of a person and not an automatic system.

            Example: `http://example.com/v1/structures?email_address=user@example.com`'
          format: email
          title: Email Address
          type: string
        filter:
          default: ''
          description: A filter string, in the format described in section API Filtering
            Format Specification of the specification.
          title: Filter
          type: string
        include:
          default: references
          description: 'A server MAY implement the JSON API concept of returning [compound
            documents](https://jsonapi.org/format/1.0/#document-compound-documents)
            by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).


            All related resource objects MUST be returned as part of an array value
            for the top-level `included` field, see the section JSON Response Schema:
            Common Fields.


            The value of `include` MUST be a comma-separated list of "relationship
            paths", as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).

            If relationship paths are not supported, or a server is unable to identify
            a relationship path a `400 Bad Request` response MUST be made.


            The **default value** for `include` is `references`.

            This means `references` entries MUST always be included under the top-level
            field `included` as default, since a server assumes if `include` is not
            specified by a client in the request, it is still specified as `include=references`.

            Note, if a client explicitly specifies `include` and leaves out `references`,
            `references` resource objects MUST NOT be included under the top-level
            field `included`, as per the definition of `included`, see section JSON
            Response Schema: Common Fields.


            > **Note**: A query with the parameter `include` set to the empty string
            means no related resource objects are to be returned under the top-level
            field `included`.'
          title: Include
          type: string
        page_above:
          default: 0
          description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
            and `page_limit` is RECOMMENDED.

            Example: Fetch up to 100 structures above sort-field value 4000 (in this
            example, server chooses to fetch results sorted by increasing `id`, so
            `page_above` value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.'
          minimum: 0.0
          title: Page Above
          type: integer
        page_below:
          default: 0
          description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
            and `page_limit` is RECOMMENDED.'
          minimum: 0.0
          title: Page Below
          type: integer
        page_cursor:
          default: 0
          description: 'RECOMMENDED for use with _cursor-based_ pagination: using
            `page_cursor` and `page_limit` is RECOMMENDED.'
          minimum: 0.0
          title: Page Cursor
          type: integer
        page_limit:
          default: 20
          description: 'Sets a numerical limit on the number of entries returned.

            See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).

            The API implementation MUST return no more than the number specified.

            It MAY return fewer.

            The database MAY have a maximum limit and not accept larger numbers (in
            which case an error code -- 403 Forbidden -- MUST be returned).

            The default limit value is up to the API implementation to decide.

            Example: `http://example.com/optimade/v1/structures?page_limit=100`'
          minimum: 0.0
          title: Page Limit
          type: integer
        page_number:
          default: 0
          description: 'RECOMMENDED for use with _page-based_ pagination: using `page_number`
            and `page_limit` is RECOMMENDED.

            It is RECOMMENDED that the first page has number 1, i.e., that `page_number`
            is 1-based.

            Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.'
          minimum: 0.0
          title: Page Number
          type: integer
        page_offset:
          default: 0
          description: 'RECOMMENDED for use with _offset-based_ pagination: using
            `page_offset` and `page_limit` is RECOMMENDED.

            Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.'
          minimum: 0.0
          title: Page Offset
          type: integer
        response_fields:
          default: ''
          description: 'A comma-delimited set of fields to be provided in the output.

            If provided, these fields MUST be returned along with the REQUIRED fields.

            Other OPTIONAL fields MUST NOT be returned when this parameter is present.

            Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`'
          pattern: ([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?
          title: Response Fields
          type: string
        response_format:
          default: json
          description: 'The output format requested (see section Response Format).

            Defaults to the format string ''json'', which specifies the standard output
            format described in this specification.

            Example: `http://example.com/v1/structures?response_format=xml`'
          title: Response Format
          type: string
        sort:
          default: ''
          description: 'If supporting sortable queries, an implementation MUST use
            the `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).


            An implementation MAY support multiple sort fields for a single query.

            If it does, it again MUST conform to the JSON API 1.0 specification.


            If an implementation supports sorting for an entry listing endpoint, then
            the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>`
            in its `data.properties.<fieldname>` response value that can be used for
            sorting, the key `sortable` with value `true`.

            If a field name under an entry listing endpoint supporting sorting cannot
            be used for sorting, the server MUST either leave out the `sortable` key
            or set it equal to `false` for the specific field name.

            The set of field names, with `sortable` equal to `true` are allowed to
            be used in the "sort fields" list according to its definition in the JSON
            API 1.0 specification.

            The field `sortable` is in addition to each property description and other
            OPTIONAL fields.

            An example is shown in the section Entry Listing Info Endpoints.'
          pattern: ([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?
          title: Sort
          type: string
      title: OptimadeQueryParameters
      type: object
    Provider:
      description: Information on the database provider of the implementation.
      properties:
        description:
          description: a longer description of the database provider
          title: Description
          type: string
        homepage:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: a [JSON API links object](http://jsonapi.org/format/1.0#document-links)
            pointing to homepage of the database provider, either directly as a string,
            or as a link object.
          title: Homepage
        name:
          description: a short name for the database provider
          title: Name
          type: string
        prefix:
          description: database-provider-specific prefix as found in section Database-Provider-Specific
            Namespace Prefixes.
          pattern: ^[a-z]([a-z]|[0-9]|_)*$
          title: Prefix
          type: string
      required:
      - name
      - description
      - prefix
      title: Provider
      type: object
    QueriesResponse:
      description: Successful response for `GET /gateways/{gateway_ID}/queries`.
      properties:
        data:
          description: List of unique OPTIMADE gateway query resource objects.
          items:
            $ref: '#/components/schemas/QueryResource'
          title: Data
          type: array
          uniqueItems: true
        errors:
          description: A list of unique errors
          items:
            $ref: '#/components/schemas/Error'
          title: Errors
          type: array
          uniqueItems: true
        included:
          anyOf:
          - items:
              $ref: '#/components/schemas/optimade__models__entries__EntryResource'
            type: array
          - items:
              type: object
            type: array
          title: Included
          uniqueItems: true
        jsonapi:
          allOf:
          - $ref: '#/components/schemas/JsonApi'
          description: Information about the JSON API used
          title: Jsonapi
        links:
          allOf:
          - $ref: '#/components/schemas/ToplevelLinks'
          description: Links associated with the primary data or errors
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/ResponseMeta'
          description: A meta object containing non-standard information
          title: Meta
      required:
      - data
      - meta
      title: QueriesResponse
      type: object
    QueriesResponseSingle:
      description: 'Successful response for `POST /gateways/{gateway_ID}/queries`

        and `GET /gateways/{gateway_ID}/queries/{query_id}`.'
      properties:
        data:
          allOf:
          - $ref: '#/components/schemas/QueryResource'
          description: 'A unique OPTIMADE gateway query resource object.

            The OPTIMADE gateway query resource object has just been created or found
            according to the specific query parameter(s) or URL id.'
          title: Data
        errors:
          description: A list of unique errors
          items:
            $ref: '#/components/schemas/Error'
          title: Errors
          type: array
          uniqueItems: true
        included:
          anyOf:
          - items:
              $ref: '#/components/schemas/optimade__models__entries__EntryResource'
            type: array
          - items:
              type: object
            type: array
          title: Included
          uniqueItems: true
        jsonapi:
          allOf:
          - $ref: '#/components/schemas/JsonApi'
          description: Information about the JSON API used
          title: Jsonapi
        links:
          allOf:
          - $ref: '#/components/schemas/ToplevelLinks'
          description: Links associated with the primary data or errors
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/ResponseMeta'
          description: A meta object containing non-standard information
          title: Meta
      required:
      - data
      - meta
      title: QueriesResponseSingle
      type: object
    QueryCreate:
      description: Model for creating new Query resources in the MongoDB
      properties:
        endpoint:
          $ref: '#/components/schemas/EndpointEntryType'
        gateway_id:
          description: The OPTIMADE gateway ID for this query.
          title: Gateway Id
          type: string
        id:
          title: Id
          type: string
        immutable_id:
          description: "The entry's immutable ID (e.g., an UUID). This is important\
            \ for databases having preferred IDs that point to \"the latest version\"\
            \ of a record, but still offer access to older variants. This ID maps\
            \ to the version-specific record, in case it changes in the future.\n\n\
            - **Type**: string.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ OPTIONAL support in implementations, i.e., MAY be `null`.\n    - **Query**:\
            \ MUST be a queryable property with support for all mandatory filter features.\n\
            \n- **Examples**:\n    - `\"8bd3e750-b477-41a0-9b11-3a799f21b44f\"`\n\
            \    - `\"fjeiwoj,54;@=%<>#32\"` (Strings that are not URL-safe are allowed.)"
          title: Immutable Id
          type: string
        last_modified:
          format: date-time
          title: Last Modified
          type: string
        query_parameters:
          allOf:
          - $ref: '#/components/schemas/OptimadeQueryParameters'
          description: OPTIMADE query parameters for entry listing endpoints used
            for this query.
          title: Query Parameters
          type: object
        response:
          allOf:
          - $ref: '#/components/schemas/GatewayQueryResponse'
          description: Response from gateway query.
          title: Response
        state:
          $ref: '#/components/schemas/QueryState'
      required:
      - gateway_id
      - query_parameters
      title: QueryCreate
      type: object
    QueryResource:
      description: OPTIMADE query resource for a gateway
      properties:
        attributes:
          $ref: '#/components/schemas/QueryResourceAttributes'
        id:
          description: "An entry's ID as defined in section Definition of Terms.\n\
            \n- **Type**: string.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ MUST be supported by all implementations, MUST NOT be `null`.\n    -\
            \ **Query**: MUST be a queryable property with support for all mandatory\
            \ filter features.\n    - **Response**: REQUIRED in the response.\n\n\
            - **Examples**:\n    - `\"db/1234567\"`\n    - `\"cod/2000000\"`\n   \
            \ - `\"cod/2000000@1234567\"`\n    - `\"nomad/L1234567890\"`\n    - `\"\
            42\"`"
          title: Id
          type: string
        links:
          allOf:
          - $ref: '#/components/schemas/ResourceLinks'
          description: a links object containing links related to the resource.
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: a meta object containing non-standard meta-information about
            a resource that can not be represented as an attribute or relationship.
          title: Meta
        relationships:
          allOf:
          - $ref: '#/components/schemas/EntryRelationships'
          description: 'A dictionary containing references to other entries according
            to the description in section Relationships encoded as [JSON API Relationships](https://jsonapi.org/format/1.0/#document-resource-object-relationships).

            The OPTIONAL human-readable description of the relationship MAY be provided
            in the `description` field inside the `meta` dictionary of the JSON API
            resource identifier object.'
          title: Relationships
        type:
          description: The name of the type of an entry.
          pattern: ^queries$
          title: Type
          type: string
      required:
      - id
      - type
      - attributes
      title: QueryResource
      type: object
    QueryResourceAttributes:
      description: Attributes for an OPTIMADE gateway query.
      properties:
        endpoint:
          allOf:
          - $ref: '#/components/schemas/EndpointEntryType'
          default: structures
          description: The entry endpoint queried, e.g., 'structures'.
          title: Endpoint
          type: enum
        gateway_id:
          description: The OPTIMADE gateway ID for this query.
          title: Gateway Id
          type: string
        immutable_id:
          description: "The entry's immutable ID (e.g., an UUID). This is important\
            \ for databases having preferred IDs that point to \"the latest version\"\
            \ of a record, but still offer access to older variants. This ID maps\
            \ to the version-specific record, in case it changes in the future.\n\n\
            - **Type**: string.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ OPTIONAL support in implementations, i.e., MAY be `null`.\n    - **Query**:\
            \ MUST be a queryable property with support for all mandatory filter features.\n\
            \n- **Examples**:\n    - `\"8bd3e750-b477-41a0-9b11-3a799f21b44f\"`\n\
            \    - `\"fjeiwoj,54;@=%<>#32\"` (Strings that are not URL-safe are allowed.)"
          title: Immutable Id
          type: string
        last_modified:
          description: "Date and time representing when the entry was last modified.\n\
            \n- **Type**: timestamp.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ SHOULD be supported by all implementations, i.e., SHOULD NOT be `null`.\n\
            \    - **Query**: MUST be a queryable property with support for all mandatory\
            \ filter features.\n    - **Response**: REQUIRED in the response unless\
            \ the query parameter `response_fields` is present and does not include\
            \ this property.\n\n- **Example**:\n    - As part of JSON response format:\
            \ `\"2007-04-05T14:30:20Z\"` (i.e., encoded as an [RFC 3339 Internet Date/Time\
            \ Format](https://tools.ietf.org/html/rfc3339#section-5.6) string.)"
          format: date-time
          title: Last Modified
          type: string
        query_parameters:
          allOf:
          - $ref: '#/components/schemas/OptimadeQueryParameters'
          description: OPTIMADE query parameters for entry listing endpoints used
            for this query.
          title: Query Parameters
          type: object
        response:
          allOf:
          - $ref: '#/components/schemas/GatewayQueryResponse'
          description: Response from gateway query.
          title: Response
        state:
          allOf:
          - $ref: '#/components/schemas/QueryState'
          default: created
          description: Current state of Gateway Query.
          title: State
          type: enum
      required:
      - last_modified
      - gateway_id
      - query_parameters
      title: QueryResourceAttributes
      type: object
    QueryState:
      description: 'Enumeration of possible states for a Gateway Query.


        The states are enumerated here in the expected evolvement.'
      enum:
      - created
      - started
      - in progress
      - finished
      title: QueryState
    ReferenceRelationship:
      description: Similar to normal JSON API relationship, but with addition of OPTIONAL
        meta field for a resource.
      properties:
        data:
          anyOf:
          - $ref: '#/components/schemas/BaseRelationshipResource'
          - items:
              $ref: '#/components/schemas/BaseRelationshipResource'
            type: array
          description: Resource linkage
          title: Data
          uniqueItems: true
        links:
          allOf:
          - $ref: '#/components/schemas/RelationshipLinks'
          description: 'a links object containing at least one of the following: self,
            related'
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: a meta object that contains non-standard meta-information about
            the relationship.
          title: Meta
      title: ReferenceRelationship
      type: object
    RelationshipLinks:
      description: 'A resource object **MAY** contain references to other resource
        objects ("relationships").

        Relationships may be to-one or to-many.

        Relationships can be specified by including a member in a resource''s links
        object.'
      properties:
        related:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: A [related resource link](https://jsonapi.org/format/1.0/#document-resource-object-related-resource-links).
          title: Related
        self:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: 'A link for the relationship itself (a ''relationship link'').

            This link allows the client to directly manipulate the relationship.

            When fetched successfully, this link returns the [linkage](https://jsonapi.org/format/1.0/#document-resource-object-linkage)
            for the related resources as its primary data.

            (See [Fetching Relationships](https://jsonapi.org/format/1.0/#fetching-relationships).)'
          title: Self
      title: RelationshipLinks
      type: object
    Relationships:
      description: "Members of the relationships object (\"relationships\") represent\
        \ references from the resource object in which it's defined to other resource\
        \ objects.\nKeys MUST NOT be:\n    type\n    id"
      properties: {}
      title: Relationships
      type: object
    Resource:
      description: Resource objects appear in a JSON API document to represent resources.
      properties:
        attributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: "an attributes object representing some of the resource\u2019\
            s data."
          title: Attributes
        id:
          description: Resource ID
          title: Id
          type: string
        links:
          allOf:
          - $ref: '#/components/schemas/ResourceLinks'
          description: a links object containing links related to the resource.
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: a meta object containing non-standard meta-information about
            a resource that can not be represented as an attribute or relationship.
          title: Meta
        relationships:
          allOf:
          - $ref: '#/components/schemas/Relationships'
          description: '[Relationships object](https://jsonapi.org/format/1.0/#document-resource-object-relationships)

            describing relationships between the resource and other JSON API resources.'
          title: Relationships
        type:
          description: Resource type
          title: Type
          type: string
      required:
      - id
      - type
      title: Resource
      type: object
    ResourceLinks:
      description: A Resource Links object
      properties:
        self:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: A link that identifies the resource represented by the resource
            object.
          title: Self
      title: ResourceLinks
      type: object
    ResponseMeta:
      description: 'A [JSON API meta member](https://jsonapi.org/format/1.0#document-meta)

        that contains JSON API meta objects of non-standard

        meta-information.


        OPTIONAL additional information global to the query that is not

        specified in this document, MUST start with a

        database-provider-specific prefix.'
      properties:
        api_version:
          description: 'Presently used full version of the OPTIMADE API.

            The version number string MUST NOT be prefixed by, e.g., "v".

            Examples: `1.0.0`, `1.0.0-rc.2`.'
          pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          title: Api Version
          type: string
        data_available:
          description: An integer containing the total number of data resource objects
            available in the database for the endpoint.
          title: Data Available
          type: integer
        data_returned:
          description: An integer containing the total number of data resource objects
            returned for the current `filter` query, independent of pagination.
          minimum: 0.0
          title: Data Returned
          type: integer
        implementation:
          allOf:
          - $ref: '#/components/schemas/Implementation'
          description: a dictionary describing the server implementation
          title: Implementation
        last_id:
          description: a string containing the last ID returned
          title: Last Id
          type: string
        more_data_available:
          description: '`false` if the response contains all data for the request
            (e.g., a request issued to a single entry endpoint, or a `filter` query
            at the last page of a paginated response) and `true` if the response is
            incomplete in the sense that multiple objects match the request, and not
            all of them have been included in the response (e.g., a query with multiple
            pages that is not at the last page).'
          title: More Data Available
          type: boolean
        provider:
          allOf:
          - $ref: '#/components/schemas/Provider'
          description: information on the database provider of the implementation.
          title: Provider
        query:
          allOf:
          - $ref: '#/components/schemas/ResponseMetaQuery'
          description: Information on the Query that was requested
          title: Query
        response_message:
          description: response string from the server
          title: Response Message
          type: string
        schema:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: 'A [JSON API links object](http://jsonapi.org/format/1.0/#document-links)
            that points to a schema for the response.

            If it is a string, or a dictionary containing no `meta` field, the provided
            URL MUST point at an [OpenAPI](https://swagger.io/specification/) schema.

            It is possible that future versions of this specification allows for alternative
            schema types.

            Hence, if the `meta` field of the JSON API links object is provided and
            contains a field `schema_type` that is not equal to the string `OpenAPI`
            the client MUST not handle failures to parse the schema or to validate
            the response against the schema as errors.'
          title: Schema
        time_stamp:
          description: A timestamp containing the date and time at which the query
            was executed.
          format: date-time
          title: Time Stamp
          type: string
        warnings:
          description: 'A list of warning resource objects representing non-critical
            errors or warnings.

            A warning resource object is defined similarly to a [JSON API error object](http://jsonapi.org/format/1.0/#error-objects),
            but MUST also include the field `type`, which MUST have the value `"warning"`.

            The field `detail` MUST be present and SHOULD contain a non-critical message,
            e.g., reporting unrecognized search attributes or deprecated features.

            The field `status`, representing a HTTP response status code, MUST NOT
            be present for a warning resource object.

            This is an exclusive field for error resource objects.'
          items:
            $ref: '#/components/schemas/Warnings'
          title: Warnings
          type: array
          uniqueItems: true
      required:
      - query
      - api_version
      - more_data_available
      title: ResponseMeta
      type: object
    ResponseMetaQuery:
      description: Information on the query that was requested.
      properties:
        representation:
          description: 'A string with the part of the URL following the versioned
            or unversioned base URL that serves the API.

            Query parameters that have not been used in processing the request MAY
            be omitted.

            In particular, if no query parameters have been involved in processing
            the request, the query part of the URL MAY be excluded.

            Example: `/structures?filter=nelements=2`'
          title: Representation
          type: string
      required:
      - representation
      title: ResponseMetaQuery
      type: object
    Search:
      description: "A general coordinated OPTIMADE search\n\n!!! important\n    Either\
        \ `database_ids` or `optimade_urls` MUST be specified."
      properties:
        database_ids:
          default: []
          description: A list of registered database IDs. Go to `/databases` to get
            all registered databases.
          items:
            type: string
          title: Database Ids
          type: array
          uniqueItems: true
        endpoint:
          default: structures
          description: The entry endpoint queried. According to the OPTIMADE specification,
            this is the same as the resource's type.
          title: Endpoint
          type: string
        optimade_urls:
          default: []
          description: A list of OPTIMADE base URLs. If a versioned base URL is supplied
            it will be used as is, as long as it represents a supported version. If
            an un-versioned base URL, standard version negotiation will be conducted
            to get the versioned base URL, which will be used as long as it represents
            a supported version. Note, a single URL can be supplied as well, and it
            will automatically be wrapped in a list in the server logic.
          items:
            format: uri
            maxLength: 65536
            minLength: 1
            type: string
          title: Optimade Urls
          type: array
          uniqueItems: true
        query_parameters:
          allOf:
          - $ref: '#/components/schemas/OptimadeQueryParameters'
          default: {}
          description: OPTIMADE query parameters for entry listing endpoints used
            for this query.
          title: Query Parameters
      title: Search
      type: object
    StructureRelationship:
      description: Similar to normal JSON API relationship, but with addition of OPTIONAL
        meta field for a resource.
      properties:
        data:
          anyOf:
          - $ref: '#/components/schemas/BaseRelationshipResource'
          - items:
              $ref: '#/components/schemas/BaseRelationshipResource'
            type: array
          description: Resource linkage
          title: Data
          uniqueItems: true
        links:
          allOf:
          - $ref: '#/components/schemas/RelationshipLinks'
          description: 'a links object containing at least one of the following: self,
            related'
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: a meta object that contains non-standard meta-information about
            the relationship.
          title: Meta
      title: StructureRelationship
      type: object
    ToplevelLinks:
      description: A set of Links objects, possibly including pagination
      properties:
        first:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: The first page of data
          title: First
        last:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: The last page of data
          title: Last
        next:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: The next page of data
          title: Next
        prev:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: The previous page of data
          title: Prev
        related:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: A related resource link
          title: Related
        self:
          anyOf:
          - format: uri
            maxLength: 65536
            minLength: 1
            type: string
          - $ref: '#/components/schemas/Link'
          description: A link to itself
          title: Self
      title: ToplevelLinks
      type: object
    Warnings:
      description: 'OPTIMADE-specific warning class based on OPTIMADE-specific JSON
        API Error.


        From the specification:


        A warning resource object is defined similarly to a JSON API error object,
        but MUST also include the field type, which MUST have the value "warning".

        The field detail MUST be present and SHOULD contain a non-critical message,
        e.g., reporting unrecognized search attributes or deprecated features.


        Note: Must be named "Warnings", since "Warning" is a built-in Python class.'
      properties:
        code:
          description: an application-specific error code, expressed as a string value.
          title: Code
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of
            the problem.
          title: Detail
          type: string
        id:
          description: A unique identifier for this particular occurrence of the problem.
          title: Id
          type: string
        links:
          allOf:
          - $ref: '#/components/schemas/ErrorLinks'
          description: A links object storing about
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: a meta object containing non-standard meta-information about
            the error.
          title: Meta
        source:
          allOf:
          - $ref: '#/components/schemas/ErrorSource'
          description: An object containing references to the source of the error
          title: Source
        title:
          description: A short, human-readable summary of the problem. It **SHOULD
            NOT** change from occurrence to occurrence of the problem, except for
            purposes of localization.
          title: Title
          type: string
        type:
          description: Warnings must be of type "warning"
          pattern: ^warning$
          title: Type
          type: string
      required:
      - detail
      - type
      title: Warnings
      type: object
    optimade__models__entries__EntryResource:
      description: The base model for an entry resource.
      properties:
        attributes:
          allOf:
          - $ref: '#/components/schemas/EntryResourceAttributes'
          description: 'A dictionary, containing key-value pairs representing the
            entry''s properties, except for `type` and `id`.

            Database-provider-specific properties need to include the database-provider-specific
            prefix (see section on Database-Provider-Specific Namespace Prefixes).'
          title: Attributes
        id:
          description: "An entry's ID as defined in section Definition of Terms.\n\
            \n- **Type**: string.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ MUST be supported by all implementations, MUST NOT be `null`.\n    -\
            \ **Query**: MUST be a queryable property with support for all mandatory\
            \ filter features.\n    - **Response**: REQUIRED in the response.\n\n\
            - **Examples**:\n    - `\"db/1234567\"`\n    - `\"cod/2000000\"`\n   \
            \ - `\"cod/2000000@1234567\"`\n    - `\"nomad/L1234567890\"`\n    - `\"\
            42\"`"
          title: Id
          type: string
        links:
          allOf:
          - $ref: '#/components/schemas/ResourceLinks'
          description: a links object containing links related to the resource.
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: a meta object containing non-standard meta-information about
            a resource that can not be represented as an attribute or relationship.
          title: Meta
        relationships:
          allOf:
          - $ref: '#/components/schemas/EntryRelationships'
          description: 'A dictionary containing references to other entries according
            to the description in section Relationships encoded as [JSON API Relationships](https://jsonapi.org/format/1.0/#document-resource-object-relationships).

            The OPTIONAL human-readable description of the relationship MAY be provided
            in the `description` field inside the `meta` dictionary of the JSON API
            resource identifier object.'
          title: Relationships
        type:
          description: "The name of the type of an entry.\n\n- **Type**: string.\n\
            \n- **Requirements/Conventions**:\n    - **Support**: MUST be supported\
            \ by all implementations, MUST NOT be `null`.\n    - **Query**: MUST be\
            \ a queryable property with support for all mandatory filter features.\n\
            \    - **Response**: REQUIRED in the response.\n    - MUST be an existing\
            \ entry type.\n    - The entry of type `<type>` and ID `<id>` MUST be\
            \ returned in response to a request for `/<type>/<id>` under the versioned\
            \ base URL.\n\n- **Example**: `\"structures\"`"
          title: Type
          type: string
      required:
      - id
      - type
      - attributes
      title: EntryResource
      type: object
    optimade_gateway__models__queries__EntryResource:
      description: Entry Resource ensuring datetimes are not naive.
      properties:
        attributes:
          allOf:
          - $ref: '#/components/schemas/EntryResourceAttributes'
          description: 'A dictionary, containing key-value pairs representing the
            entry''s properties, except for `type` and `id`.

            Database-provider-specific properties need to include the database-provider-specific
            prefix (see section on Database-Provider-Specific Namespace Prefixes).'
          title: Attributes
        id:
          description: "An entry's ID as defined in section Definition of Terms.\n\
            \n- **Type**: string.\n\n- **Requirements/Conventions**:\n    - **Support**:\
            \ MUST be supported by all implementations, MUST NOT be `null`.\n    -\
            \ **Query**: MUST be a queryable property with support for all mandatory\
            \ filter features.\n    - **Response**: REQUIRED in the response.\n\n\
            - **Examples**:\n    - `\"db/1234567\"`\n    - `\"cod/2000000\"`\n   \
            \ - `\"cod/2000000@1234567\"`\n    - `\"nomad/L1234567890\"`\n    - `\"\
            42\"`"
          title: Id
          type: string
        links:
          allOf:
          - $ref: '#/components/schemas/ResourceLinks'
          description: a links object containing links related to the resource.
          title: Links
        meta:
          allOf:
          - $ref: '#/components/schemas/Meta'
          description: a meta object containing non-standard meta-information about
            a resource that can not be represented as an attribute or relationship.
          title: Meta
        relationships:
          allOf:
          - $ref: '#/components/schemas/EntryRelationships'
          description: 'A dictionary containing references to other entries according
            to the description in section Relationships encoded as [JSON API Relationships](https://jsonapi.org/format/1.0/#document-resource-object-relationships).

            The OPTIONAL human-readable description of the relationship MAY be provided
            in the `description` field inside the `meta` dictionary of the JSON API
            resource identifier object.'
          title: Relationships
        type:
          description: "The name of the type of an entry.\n\n- **Type**: string.\n\
            \n- **Requirements/Conventions**:\n    - **Support**: MUST be supported\
            \ by all implementations, MUST NOT be `null`.\n    - **Query**: MUST be\
            \ a queryable property with support for all mandatory filter features.\n\
            \    - **Response**: REQUIRED in the response.\n    - MUST be an existing\
            \ entry type.\n    - The entry of type `<type>` and ID `<id>` MUST be\
            \ returned in response to a request for `/<type>/<id>` under the versioned\
            \ base URL.\n\n- **Example**: `\"structures\"`"
          title: Type
          type: string
      required:
      - id
      - type
      - attributes
      title: EntryResource
      type: object
info:
  description: A gateway server to query multiple OPTIMADE databases.
  title: OPTIMADE Gateway
  version: 0.2.2
  x-application-id: ''
  x-application-name: OPTIMADE Gateway
  x-external-hostname: http://localhost:8000
  x-products:
  - name: OPTIMADE Gateway
    productId: 22e6e756-7179-47c9-8f37-1ee06c7b38ae
openapi: 3.0.2
paths:
  /databases:
    get:
      description: '`GET /databases`


        Return overview of all (active) databases.'
      operationId: get_databases_databases_get
      parameters:
      - description: A filter string, in the format described in section API Filtering
          Format Specification of the specification.
        in: query
        name: filter
        required: false
        schema:
          default: ''
          description: A filter string, in the format described in section API Filtering
            Format Specification of the specification.
          title: Filter
          type: string
      - description: 'The output format requested (see section Response Format).

          Defaults to the format string ''json'', which specifies the standard output
          format described in this specification.

          Example: `http://example.com/v1/structures?response_format=xml`'
        in: query
        name: response_format
        required: false
        schema:
          default: json
          description: 'The output format requested (see section Response Format).

            Defaults to the format string ''json'', which specifies the standard output
            format described in this specification.

            Example: `http://example.com/v1/structures?response_format=xml`'
          title: Response Format
          type: string
      - description: 'An email address of the user making the request.

          The email SHOULD be that of a person and not an automatic system.

          Example: `http://example.com/v1/structures?email_address=user@example.com`'
        in: query
        name: email_address
        required: false
        schema:
          default: ''
          description: 'An email address of the user making the request.

            The email SHOULD be that of a person and not an automatic system.

            Example: `http://example.com/v1/structures?email_address=user@example.com`'
          format: email
          title: Email Address
          type: string
      - description: 'A comma-delimited set of fields to be provided in the output.

          If provided, these fields MUST be returned along with the REQUIRED fields.

          Other OPTIONAL fields MUST NOT be returned when this parameter is present.

          Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`'
        in: query
        name: response_fields
        required: false
        schema:
          default: ''
          description: 'A comma-delimited set of fields to be provided in the output.

            If provided, these fields MUST be returned along with the REQUIRED fields.

            Other OPTIONAL fields MUST NOT be returned when this parameter is present.

            Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`'
          pattern: ([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?
          title: Response Fields
          type: string
      - description: 'If supporting sortable queries, an implementation MUST use the
          `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).


          An implementation MAY support multiple sort fields for a single query.

          If it does, it again MUST conform to the JSON API 1.0 specification.


          If an implementation supports sorting for an entry listing endpoint, then
          the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>`
          in its `data.properties.<fieldname>` response value that can be used for
          sorting, the key `sortable` with value `true`.

          If a field name under an entry listing endpoint supporting sorting cannot
          be used for sorting, the server MUST either leave out the `sortable` key
          or set it equal to `false` for the specific field name.

          The set of field names, with `sortable` equal to `true` are allowed to be
          used in the "sort fields" list according to its definition in the JSON API
          1.0 specification.

          The field `sortable` is in addition to each property description and other
          OPTIONAL fields.

          An example is shown in the section Entry Listing Info Endpoints.'
        in: query
        name: sort
        required: false
        schema:
          default: ''
          description: 'If supporting sortable queries, an implementation MUST use
            the `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).


            An implementation MAY support multiple sort fields for a single query.

            If it does, it again MUST conform to the JSON API 1.0 specification.


            If an implementation supports sorting for an entry listing endpoint, then
            the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>`
            in its `data.properties.<fieldname>` response value that can be used for
            sorting, the key `sortable` with value `true`.

            If a field name under an entry listing endpoint supporting sorting cannot
            be used for sorting, the server MUST either leave out the `sortable` key
            or set it equal to `false` for the specific field name.

            The set of field names, with `sortable` equal to `true` are allowed to
            be used in the "sort fields" list according to its definition in the JSON
            API 1.0 specification.

            The field `sortable` is in addition to each property description and other
            OPTIONAL fields.

            An example is shown in the section Entry Listing Info Endpoints.'
          pattern: ([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?
          title: Sort
          type: string
      - description: 'Sets a numerical limit on the number of entries returned.

          See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).

          The API implementation MUST return no more than the number specified.

          It MAY return fewer.

          The database MAY have a maximum limit and not accept larger numbers (in
          which case an error code -- 403 Forbidden -- MUST be returned).

          The default limit value is up to the API implementation to decide.

          Example: `http://example.com/optimade/v1/structures?page_limit=100`'
        in: query
        name: page_limit
        required: false
        schema:
          default: 20
          description: 'Sets a numerical limit on the number of entries returned.

            See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).

            The API implementation MUST return no more than the number specified.

            It MAY return fewer.

            The database MAY have a maximum limit and not accept larger numbers (in
            which case an error code -- 403 Forbidden -- MUST be returned).

            The default limit value is up to the API implementation to decide.

            Example: `http://example.com/optimade/v1/structures?page_limit=100`'
          minimum: 0.0
          title: Page Limit
          type: integer
      - description: 'RECOMMENDED for use with _offset-based_ pagination: using `page_offset`
          and `page_limit` is RECOMMENDED.

          Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.'
        in: query
        name: page_offset
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _offset-based_ pagination: using
            `page_offset` and `page_limit` is RECOMMENDED.

            Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.'
          minimum: 0.0
          title: Page Offset
          type: integer
      - description: 'RECOMMENDED for use with _page-based_ pagination: using `page_number`
          and `page_limit` is RECOMMENDED.

          It is RECOMMENDED that the first page has number 1, i.e., that `page_number`
          is 1-based.

          Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.'
        in: query
        name: page_number
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _page-based_ pagination: using `page_number`
            and `page_limit` is RECOMMENDED.

            It is RECOMMENDED that the first page has number 1, i.e., that `page_number`
            is 1-based.

            Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.'
          minimum: 0.0
          title: Page Number
          type: integer
      - description: 'RECOMMENDED for use with _cursor-based_ pagination: using `page_cursor`
          and `page_limit` is RECOMMENDED.'
        in: query
        name: page_cursor
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _cursor-based_ pagination: using
            `page_cursor` and `page_limit` is RECOMMENDED.'
          minimum: 0.0
          title: Page Cursor
          type: integer
      - description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
          and `page_limit` is RECOMMENDED.

          Example: Fetch up to 100 structures above sort-field value 4000 (in this
          example, server chooses to fetch results sorted by increasing `id`, so `page_above`
          value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.'
        in: query
        name: page_above
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
            and `page_limit` is RECOMMENDED.

            Example: Fetch up to 100 structures above sort-field value 4000 (in this
            example, server chooses to fetch results sorted by increasing `id`, so
            `page_above` value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.'
          minimum: 0.0
          title: Page Above
          type: integer
      - description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
          and `page_limit` is RECOMMENDED.'
        in: query
        name: page_below
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
            and `page_limit` is RECOMMENDED.'
          minimum: 0.0
          title: Page Below
          type: integer
      - description: 'A server MAY implement the JSON API concept of returning [compound
          documents](https://jsonapi.org/format/1.0/#document-compound-documents)
          by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).


          All related resource objects MUST be returned as part of an array value
          for the top-level `included` field, see the section JSON Response Schema:
          Common Fields.


          The value of `include` MUST be a comma-separated list of "relationship paths",
          as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).

          If relationship paths are not supported, or a server is unable to identify
          a relationship path a `400 Bad Request` response MUST be made.


          The **default value** for `include` is `references`.

          This means `references` entries MUST always be included under the top-level
          field `included` as default, since a server assumes if `include` is not
          specified by a client in the request, it is still specified as `include=references`.

          Note, if a client explicitly specifies `include` and leaves out `references`,
          `references` resource objects MUST NOT be included under the top-level field
          `included`, as per the definition of `included`, see section JSON Response
          Schema: Common Fields.


          > **Note**: A query with the parameter `include` set to the empty string
          means no related resource objects are to be returned under the top-level
          field `included`.'
        in: query
        name: include
        required: false
        schema:
          default: references
          description: 'A server MAY implement the JSON API concept of returning [compound
            documents](https://jsonapi.org/format/1.0/#document-compound-documents)
            by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).


            All related resource objects MUST be returned as part of an array value
            for the top-level `included` field, see the section JSON Response Schema:
            Common Fields.


            The value of `include` MUST be a comma-separated list of "relationship
            paths", as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).

            If relationship paths are not supported, or a server is unable to identify
            a relationship path a `400 Bad Request` response MUST be made.


            The **default value** for `include` is `references`.

            This means `references` entries MUST always be included under the top-level
            field `included` as default, since a server assumes if `include` is not
            specified by a client in the request, it is still specified as `include=references`.

            Note, if a client explicitly specifies `include` and leaves out `references`,
            `references` resource objects MUST NOT be included under the top-level
            field `included`, as per the definition of `included`, see section JSON
            Response Schema: Common Fields.


            > **Note**: A query with the parameter `include` set to the empty string
            means no related resource objects are to be returned under the top-level
            field `included`.'
          title: Include
          type: string
      - description: If the client provides the parameter, the value SHOULD have the
          format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version and MINOR
          is a minor version of the API. For example, if a client appends `api_hint=v1.0`
          to the query string, the hint provided is for major version 1 and minor
          version 0.
        in: query
        name: api_hint
        required: false
        schema:
          default: ''
          description: If the client provides the parameter, the value SHOULD have
            the format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version
            and MINOR is a minor version of the API. For example, if a client appends
            `api_hint=v1.0` to the query string, the hint provided is for major version
            1 and minor version 0.
          pattern: (v[0-9]+(\.[0-9]+)?)?
          title: Api Hint
          type: string
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/DatabasesResponse'
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Get Databases
      tags:
      - Databases
    post:
      description: '`POST /databases`


        Create/Register or return an existing

        [`LinksResource`](https://www.optimade.org/optimade-python-tools/api_reference/models/links/#optimade.models.links.LinksResource),

        representing a database resource object, according to `database`.'
      operationId: post_databases_databases_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseCreate'
        required: true
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/DatabasesResponseSingle'
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Post Databases
      tags:
      - Databases
  /databases/{database_id}:
    get:
      description: '`GET /databases/{database ID}`


        Return a single

        [`LinksResource`](https://www.optimade.org/optimade-python-tools/api_reference/models/links/#optimade.models.links.LinksResource)

        representing the database resource object with `id={database ID}`.'
      operationId: get_database_databases__database_id__get
      parameters:
      - in: path
        name: database_id
        required: true
        schema:
          title: Database Id
          type: string
      - description: 'The output format requested (see section Response Format).

          Defaults to the format string ''json'', which specifies the standard output
          format described in this specification.

          Example: `http://example.com/v1/structures?response_format=xml`'
        in: query
        name: response_format
        required: false
        schema:
          default: json
          description: 'The output format requested (see section Response Format).

            Defaults to the format string ''json'', which specifies the standard output
            format described in this specification.

            Example: `http://example.com/v1/structures?response_format=xml`'
          title: Response Format
          type: string
      - description: 'An email address of the user making the request.

          The email SHOULD be that of a person and not an automatic system.

          Example: `http://example.com/v1/structures?email_address=user@example.com`'
        in: query
        name: email_address
        required: false
        schema:
          default: ''
          description: 'An email address of the user making the request.

            The email SHOULD be that of a person and not an automatic system.

            Example: `http://example.com/v1/structures?email_address=user@example.com`'
          format: email
          title: Email Address
          type: string
      - description: 'A comma-delimited set of fields to be provided in the output.

          If provided, these fields MUST be returned along with the REQUIRED fields.

          Other OPTIONAL fields MUST NOT be returned when this parameter is present.

          Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`'
        in: query
        name: response_fields
        required: false
        schema:
          default: ''
          description: 'A comma-delimited set of fields to be provided in the output.

            If provided, these fields MUST be returned along with the REQUIRED fields.

            Other OPTIONAL fields MUST NOT be returned when this parameter is present.

            Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`'
          pattern: ([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?
          title: Response Fields
          type: string
      - description: 'A server MAY implement the JSON API concept of returning [compound
          documents](https://jsonapi.org/format/1.0/#document-compound-documents)
          by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).


          All related resource objects MUST be returned as part of an array value
          for the top-level `included` field, see the section JSON Response Schema:
          Common Fields.


          The value of `include` MUST be a comma-separated list of "relationship paths",
          as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).

          If relationship paths are not supported, or a server is unable to identify
          a relationship path a `400 Bad Request` response MUST be made.


          The **default value** for `include` is `references`.

          This means `references` entries MUST always be included under the top-level
          field `included` as default, since a server assumes if `include` is not
          specified by a client in the request, it is still specified as `include=references`.

          Note, if a client explicitly specifies `include` and leaves out `references`,
          `references` resource objects MUST NOT be included under the top-level field
          `included`, as per the definition of `included`, see section JSON Response
          Schema: Common Fields.


          > **Note**: A query with the parameter `include` set to the empty string
          means no related resource objects are to be returned under the top-level
          field `included`.'
        in: query
        name: include
        required: false
        schema:
          default: references
          description: 'A server MAY implement the JSON API concept of returning [compound
            documents](https://jsonapi.org/format/1.0/#document-compound-documents)
            by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).


            All related resource objects MUST be returned as part of an array value
            for the top-level `included` field, see the section JSON Response Schema:
            Common Fields.


            The value of `include` MUST be a comma-separated list of "relationship
            paths", as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).

            If relationship paths are not supported, or a server is unable to identify
            a relationship path a `400 Bad Request` response MUST be made.


            The **default value** for `include` is `references`.

            This means `references` entries MUST always be included under the top-level
            field `included` as default, since a server assumes if `include` is not
            specified by a client in the request, it is still specified as `include=references`.

            Note, if a client explicitly specifies `include` and leaves out `references`,
            `references` resource objects MUST NOT be included under the top-level
            field `included`, as per the definition of `included`, see section JSON
            Response Schema: Common Fields.


            > **Note**: A query with the parameter `include` set to the empty string
            means no related resource objects are to be returned under the top-level
            field `included`.'
          title: Include
          type: string
      - description: If the client provides the parameter, the value SHOULD have the
          format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version and MINOR
          is a minor version of the API. For example, if a client appends `api_hint=v1.0`
          to the query string, the hint provided is for major version 1 and minor
          version 0.
        in: query
        name: api_hint
        required: false
        schema:
          default: ''
          description: If the client provides the parameter, the value SHOULD have
            the format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version
            and MINOR is a minor version of the API. For example, if a client appends
            `api_hint=v1.0` to the query string, the hint provided is for major version
            1 and minor version 0.
          pattern: (v[0-9]+(\.[0-9]+)?)?
          title: Api Hint
          type: string
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/DatabasesResponseSingle'
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Get Database
      tags:
      - Databases
  /gateways:
    get:
      description: '`GET /gateways`


        Return overview of all (active) gateways.'
      operationId: get_gateways_gateways_get
      parameters:
      - description: A filter string, in the format described in section API Filtering
          Format Specification of the specification.
        in: query
        name: filter
        required: false
        schema:
          default: ''
          description: A filter string, in the format described in section API Filtering
            Format Specification of the specification.
          title: Filter
          type: string
      - description: 'The output format requested (see section Response Format).

          Defaults to the format string ''json'', which specifies the standard output
          format described in this specification.

          Example: `http://example.com/v1/structures?response_format=xml`'
        in: query
        name: response_format
        required: false
        schema:
          default: json
          description: 'The output format requested (see section Response Format).

            Defaults to the format string ''json'', which specifies the standard output
            format described in this specification.

            Example: `http://example.com/v1/structures?response_format=xml`'
          title: Response Format
          type: string
      - description: 'An email address of the user making the request.

          The email SHOULD be that of a person and not an automatic system.

          Example: `http://example.com/v1/structures?email_address=user@example.com`'
        in: query
        name: email_address
        required: false
        schema:
          default: ''
          description: 'An email address of the user making the request.

            The email SHOULD be that of a person and not an automatic system.

            Example: `http://example.com/v1/structures?email_address=user@example.com`'
          format: email
          title: Email Address
          type: string
      - description: 'A comma-delimited set of fields to be provided in the output.

          If provided, these fields MUST be returned along with the REQUIRED fields.

          Other OPTIONAL fields MUST NOT be returned when this parameter is present.

          Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`'
        in: query
        name: response_fields
        required: false
        schema:
          default: ''
          description: 'A comma-delimited set of fields to be provided in the output.

            If provided, these fields MUST be returned along with the REQUIRED fields.

            Other OPTIONAL fields MUST NOT be returned when this parameter is present.

            Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`'
          pattern: ([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?
          title: Response Fields
          type: string
      - description: 'If supporting sortable queries, an implementation MUST use the
          `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).


          An implementation MAY support multiple sort fields for a single query.

          If it does, it again MUST conform to the JSON API 1.0 specification.


          If an implementation supports sorting for an entry listing endpoint, then
          the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>`
          in its `data.properties.<fieldname>` response value that can be used for
          sorting, the key `sortable` with value `true`.

          If a field name under an entry listing endpoint supporting sorting cannot
          be used for sorting, the server MUST either leave out the `sortable` key
          or set it equal to `false` for the specific field name.

          The set of field names, with `sortable` equal to `true` are allowed to be
          used in the "sort fields" list according to its definition in the JSON API
          1.0 specification.

          The field `sortable` is in addition to each property description and other
          OPTIONAL fields.

          An example is shown in the section Entry Listing Info Endpoints.'
        in: query
        name: sort
        required: false
        schema:
          default: ''
          description: 'If supporting sortable queries, an implementation MUST use
            the `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).


            An implementation MAY support multiple sort fields for a single query.

            If it does, it again MUST conform to the JSON API 1.0 specification.


            If an implementation supports sorting for an entry listing endpoint, then
            the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>`
            in its `data.properties.<fieldname>` response value that can be used for
            sorting, the key `sortable` with value `true`.

            If a field name under an entry listing endpoint supporting sorting cannot
            be used for sorting, the server MUST either leave out the `sortable` key
            or set it equal to `false` for the specific field name.

            The set of field names, with `sortable` equal to `true` are allowed to
            be used in the "sort fields" list according to its definition in the JSON
            API 1.0 specification.

            The field `sortable` is in addition to each property description and other
            OPTIONAL fields.

            An example is shown in the section Entry Listing Info Endpoints.'
          pattern: ([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?
          title: Sort
          type: string
      - description: 'Sets a numerical limit on the number of entries returned.

          See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).

          The API implementation MUST return no more than the number specified.

          It MAY return fewer.

          The database MAY have a maximum limit and not accept larger numbers (in
          which case an error code -- 403 Forbidden -- MUST be returned).

          The default limit value is up to the API implementation to decide.

          Example: `http://example.com/optimade/v1/structures?page_limit=100`'
        in: query
        name: page_limit
        required: false
        schema:
          default: 20
          description: 'Sets a numerical limit on the number of entries returned.

            See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).

            The API implementation MUST return no more than the number specified.

            It MAY return fewer.

            The database MAY have a maximum limit and not accept larger numbers (in
            which case an error code -- 403 Forbidden -- MUST be returned).

            The default limit value is up to the API implementation to decide.

            Example: `http://example.com/optimade/v1/structures?page_limit=100`'
          minimum: 0.0
          title: Page Limit
          type: integer
      - description: 'RECOMMENDED for use with _offset-based_ pagination: using `page_offset`
          and `page_limit` is RECOMMENDED.

          Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.'
        in: query
        name: page_offset
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _offset-based_ pagination: using
            `page_offset` and `page_limit` is RECOMMENDED.

            Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.'
          minimum: 0.0
          title: Page Offset
          type: integer
      - description: 'RECOMMENDED for use with _page-based_ pagination: using `page_number`
          and `page_limit` is RECOMMENDED.

          It is RECOMMENDED that the first page has number 1, i.e., that `page_number`
          is 1-based.

          Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.'
        in: query
        name: page_number
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _page-based_ pagination: using `page_number`
            and `page_limit` is RECOMMENDED.

            It is RECOMMENDED that the first page has number 1, i.e., that `page_number`
            is 1-based.

            Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.'
          minimum: 0.0
          title: Page Number
          type: integer
      - description: 'RECOMMENDED for use with _cursor-based_ pagination: using `page_cursor`
          and `page_limit` is RECOMMENDED.'
        in: query
        name: page_cursor
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _cursor-based_ pagination: using
            `page_cursor` and `page_limit` is RECOMMENDED.'
          minimum: 0.0
          title: Page Cursor
          type: integer
      - description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
          and `page_limit` is RECOMMENDED.

          Example: Fetch up to 100 structures above sort-field value 4000 (in this
          example, server chooses to fetch results sorted by increasing `id`, so `page_above`
          value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.'
        in: query
        name: page_above
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
            and `page_limit` is RECOMMENDED.

            Example: Fetch up to 100 structures above sort-field value 4000 (in this
            example, server chooses to fetch results sorted by increasing `id`, so
            `page_above` value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.'
          minimum: 0.0
          title: Page Above
          type: integer
      - description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
          and `page_limit` is RECOMMENDED.'
        in: query
        name: page_below
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
            and `page_limit` is RECOMMENDED.'
          minimum: 0.0
          title: Page Below
          type: integer
      - description: 'A server MAY implement the JSON API concept of returning [compound
          documents](https://jsonapi.org/format/1.0/#document-compound-documents)
          by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).


          All related resource objects MUST be returned as part of an array value
          for the top-level `included` field, see the section JSON Response Schema:
          Common Fields.


          The value of `include` MUST be a comma-separated list of "relationship paths",
          as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).

          If relationship paths are not supported, or a server is unable to identify
          a relationship path a `400 Bad Request` response MUST be made.


          The **default value** for `include` is `references`.

          This means `references` entries MUST always be included under the top-level
          field `included` as default, since a server assumes if `include` is not
          specified by a client in the request, it is still specified as `include=references`.

          Note, if a client explicitly specifies `include` and leaves out `references`,
          `references` resource objects MUST NOT be included under the top-level field
          `included`, as per the definition of `included`, see section JSON Response
          Schema: Common Fields.


          > **Note**: A query with the parameter `include` set to the empty string
          means no related resource objects are to be returned under the top-level
          field `included`.'
        in: query
        name: include
        required: false
        schema:
          default: references
          description: 'A server MAY implement the JSON API concept of returning [compound
            documents](https://jsonapi.org/format/1.0/#document-compound-documents)
            by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).


            All related resource objects MUST be returned as part of an array value
            for the top-level `included` field, see the section JSON Response Schema:
            Common Fields.


            The value of `include` MUST be a comma-separated list of "relationship
            paths", as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).

            If relationship paths are not supported, or a server is unable to identify
            a relationship path a `400 Bad Request` response MUST be made.


            The **default value** for `include` is `references`.

            This means `references` entries MUST always be included under the top-level
            field `included` as default, since a server assumes if `include` is not
            specified by a client in the request, it is still specified as `include=references`.

            Note, if a client explicitly specifies `include` and leaves out `references`,
            `references` resource objects MUST NOT be included under the top-level
            field `included`, as per the definition of `included`, see section JSON
            Response Schema: Common Fields.


            > **Note**: A query with the parameter `include` set to the empty string
            means no related resource objects are to be returned under the top-level
            field `included`.'
          title: Include
          type: string
      - description: If the client provides the parameter, the value SHOULD have the
          format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version and MINOR
          is a minor version of the API. For example, if a client appends `api_hint=v1.0`
          to the query string, the hint provided is for major version 1 and minor
          version 0.
        in: query
        name: api_hint
        required: false
        schema:
          default: ''
          description: If the client provides the parameter, the value SHOULD have
            the format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version
            and MINOR is a minor version of the API. For example, if a client appends
            `api_hint=v1.0` to the query string, the hint provided is for major version
            1 and minor version 0.
          pattern: (v[0-9]+(\.[0-9]+)?)?
          title: Api Hint
          type: string
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/GatewaysResponse'
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Get Gateways
      tags:
      - Gateways
    post:
      description: '`POST /gateways`


        Create or return existing gateway according to `gateway`.'
      operationId: post_gateways_gateways_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GatewayCreate'
        required: true
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/GatewaysResponseSingle'
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Post Gateways
      tags:
      - Gateways
  /gateways/{gateway_id}:
    get:
      description: '`GET /gateways/{gateway ID}`


        Return a single [`GatewayResource`][optimade_gateway.models.gateways.GatewayResource].'
      operationId: get_gateway_gateways__gateway_id__get
      parameters:
      - in: path
        name: gateway_id
        required: true
        schema:
          title: Gateway Id
          type: string
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/GatewaysResponseSingle'
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Get Gateway
      tags:
      - Gateways
  /heartbeat:
    get:
      description: '`GET /heartbeat`


        Return `200 OK` with a `plain/text` response of "OPTIMADE Gateway is alive".'
      operationId: heartbeat
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema: {}
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Get Heartbeat
      tags:
      - Heartbeat
  /info:
    get:
      description: '`GET /info`


        An introspective endpoint for the gateway service.'
      operationId: get_info_info_get
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Get Info
      tags:
      - Info
  /info/{entry}:
    get:
      description: '`GET /info/{entry}`


        Get information about the gateway service''s entry-listing endpoints.'
      operationId: get_entry_info_info__entry__get
      parameters:
      - in: path
        name: entry
        required: true
        schema:
          title: Entry
          type: string
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/EntryInfoResponse'
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Get Entry Info
      tags:
      - Info
  /links:
    get:
      description: '`GET /links`


        Return a regular `/links` response for an OPTIMADE implementation.'
      operationId: get_links_links_get
      parameters:
      - description: A filter string, in the format described in section API Filtering
          Format Specification of the specification.
        in: query
        name: filter
        required: false
        schema:
          default: ''
          description: A filter string, in the format described in section API Filtering
            Format Specification of the specification.
          title: Filter
          type: string
      - description: 'The output format requested (see section Response Format).

          Defaults to the format string ''json'', which specifies the standard output
          format described in this specification.

          Example: `http://example.com/v1/structures?response_format=xml`'
        in: query
        name: response_format
        required: false
        schema:
          default: json
          description: 'The output format requested (see section Response Format).

            Defaults to the format string ''json'', which specifies the standard output
            format described in this specification.

            Example: `http://example.com/v1/structures?response_format=xml`'
          title: Response Format
          type: string
      - description: 'An email address of the user making the request.

          The email SHOULD be that of a person and not an automatic system.

          Example: `http://example.com/v1/structures?email_address=user@example.com`'
        in: query
        name: email_address
        required: false
        schema:
          default: ''
          description: 'An email address of the user making the request.

            The email SHOULD be that of a person and not an automatic system.

            Example: `http://example.com/v1/structures?email_address=user@example.com`'
          format: email
          title: Email Address
          type: string
      - description: 'A comma-delimited set of fields to be provided in the output.

          If provided, these fields MUST be returned along with the REQUIRED fields.

          Other OPTIONAL fields MUST NOT be returned when this parameter is present.

          Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`'
        in: query
        name: response_fields
        required: false
        schema:
          default: ''
          description: 'A comma-delimited set of fields to be provided in the output.

            If provided, these fields MUST be returned along with the REQUIRED fields.

            Other OPTIONAL fields MUST NOT be returned when this parameter is present.

            Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`'
          pattern: ([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?
          title: Response Fields
          type: string
      - description: 'If supporting sortable queries, an implementation MUST use the
          `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).


          An implementation MAY support multiple sort fields for a single query.

          If it does, it again MUST conform to the JSON API 1.0 specification.


          If an implementation supports sorting for an entry listing endpoint, then
          the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>`
          in its `data.properties.<fieldname>` response value that can be used for
          sorting, the key `sortable` with value `true`.

          If a field name under an entry listing endpoint supporting sorting cannot
          be used for sorting, the server MUST either leave out the `sortable` key
          or set it equal to `false` for the specific field name.

          The set of field names, with `sortable` equal to `true` are allowed to be
          used in the "sort fields" list according to its definition in the JSON API
          1.0 specification.

          The field `sortable` is in addition to each property description and other
          OPTIONAL fields.

          An example is shown in the section Entry Listing Info Endpoints.'
        in: query
        name: sort
        required: false
        schema:
          default: ''
          description: 'If supporting sortable queries, an implementation MUST use
            the `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).


            An implementation MAY support multiple sort fields for a single query.

            If it does, it again MUST conform to the JSON API 1.0 specification.


            If an implementation supports sorting for an entry listing endpoint, then
            the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>`
            in its `data.properties.<fieldname>` response value that can be used for
            sorting, the key `sortable` with value `true`.

            If a field name under an entry listing endpoint supporting sorting cannot
            be used for sorting, the server MUST either leave out the `sortable` key
            or set it equal to `false` for the specific field name.

            The set of field names, with `sortable` equal to `true` are allowed to
            be used in the "sort fields" list according to its definition in the JSON
            API 1.0 specification.

            The field `sortable` is in addition to each property description and other
            OPTIONAL fields.

            An example is shown in the section Entry Listing Info Endpoints.'
          pattern: ([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?
          title: Sort
          type: string
      - description: 'Sets a numerical limit on the number of entries returned.

          See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).

          The API implementation MUST return no more than the number specified.

          It MAY return fewer.

          The database MAY have a maximum limit and not accept larger numbers (in
          which case an error code -- 403 Forbidden -- MUST be returned).

          The default limit value is up to the API implementation to decide.

          Example: `http://example.com/optimade/v1/structures?page_limit=100`'
        in: query
        name: page_limit
        required: false
        schema:
          default: 20
          description: 'Sets a numerical limit on the number of entries returned.

            See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).

            The API implementation MUST return no more than the number specified.

            It MAY return fewer.

            The database MAY have a maximum limit and not accept larger numbers (in
            which case an error code -- 403 Forbidden -- MUST be returned).

            The default limit value is up to the API implementation to decide.

            Example: `http://example.com/optimade/v1/structures?page_limit=100`'
          minimum: 0.0
          title: Page Limit
          type: integer
      - description: 'RECOMMENDED for use with _offset-based_ pagination: using `page_offset`
          and `page_limit` is RECOMMENDED.

          Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.'
        in: query
        name: page_offset
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _offset-based_ pagination: using
            `page_offset` and `page_limit` is RECOMMENDED.

            Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.'
          minimum: 0.0
          title: Page Offset
          type: integer
      - description: 'RECOMMENDED for use with _page-based_ pagination: using `page_number`
          and `page_limit` is RECOMMENDED.

          It is RECOMMENDED that the first page has number 1, i.e., that `page_number`
          is 1-based.

          Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.'
        in: query
        name: page_number
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _page-based_ pagination: using `page_number`
            and `page_limit` is RECOMMENDED.

            It is RECOMMENDED that the first page has number 1, i.e., that `page_number`
            is 1-based.

            Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.'
          minimum: 0.0
          title: Page Number
          type: integer
      - description: 'RECOMMENDED for use with _cursor-based_ pagination: using `page_cursor`
          and `page_limit` is RECOMMENDED.'
        in: query
        name: page_cursor
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _cursor-based_ pagination: using
            `page_cursor` and `page_limit` is RECOMMENDED.'
          minimum: 0.0
          title: Page Cursor
          type: integer
      - description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
          and `page_limit` is RECOMMENDED.

          Example: Fetch up to 100 structures above sort-field value 4000 (in this
          example, server chooses to fetch results sorted by increasing `id`, so `page_above`
          value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.'
        in: query
        name: page_above
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
            and `page_limit` is RECOMMENDED.

            Example: Fetch up to 100 structures above sort-field value 4000 (in this
            example, server chooses to fetch results sorted by increasing `id`, so
            `page_above` value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.'
          minimum: 0.0
          title: Page Above
          type: integer
      - description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
          and `page_limit` is RECOMMENDED.'
        in: query
        name: page_below
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
            and `page_limit` is RECOMMENDED.'
          minimum: 0.0
          title: Page Below
          type: integer
      - description: 'A server MAY implement the JSON API concept of returning [compound
          documents](https://jsonapi.org/format/1.0/#document-compound-documents)
          by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).


          All related resource objects MUST be returned as part of an array value
          for the top-level `included` field, see the section JSON Response Schema:
          Common Fields.


          The value of `include` MUST be a comma-separated list of "relationship paths",
          as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).

          If relationship paths are not supported, or a server is unable to identify
          a relationship path a `400 Bad Request` response MUST be made.


          The **default value** for `include` is `references`.

          This means `references` entries MUST always be included under the top-level
          field `included` as default, since a server assumes if `include` is not
          specified by a client in the request, it is still specified as `include=references`.

          Note, if a client explicitly specifies `include` and leaves out `references`,
          `references` resource objects MUST NOT be included under the top-level field
          `included`, as per the definition of `included`, see section JSON Response
          Schema: Common Fields.


          > **Note**: A query with the parameter `include` set to the empty string
          means no related resource objects are to be returned under the top-level
          field `included`.'
        in: query
        name: include
        required: false
        schema:
          default: references
          description: 'A server MAY implement the JSON API concept of returning [compound
            documents](https://jsonapi.org/format/1.0/#document-compound-documents)
            by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).


            All related resource objects MUST be returned as part of an array value
            for the top-level `included` field, see the section JSON Response Schema:
            Common Fields.


            The value of `include` MUST be a comma-separated list of "relationship
            paths", as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).

            If relationship paths are not supported, or a server is unable to identify
            a relationship path a `400 Bad Request` response MUST be made.


            The **default value** for `include` is `references`.

            This means `references` entries MUST always be included under the top-level
            field `included` as default, since a server assumes if `include` is not
            specified by a client in the request, it is still specified as `include=references`.

            Note, if a client explicitly specifies `include` and leaves out `references`,
            `references` resource objects MUST NOT be included under the top-level
            field `included`, as per the definition of `included`, see section JSON
            Response Schema: Common Fields.


            > **Note**: A query with the parameter `include` set to the empty string
            means no related resource objects are to be returned under the top-level
            field `included`.'
          title: Include
          type: string
      - description: If the client provides the parameter, the value SHOULD have the
          format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version and MINOR
          is a minor version of the API. For example, if a client appends `api_hint=v1.0`
          to the query string, the hint provided is for major version 1 and minor
          version 0.
        in: query
        name: api_hint
        required: false
        schema:
          default: ''
          description: If the client provides the parameter, the value SHOULD have
            the format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version
            and MINOR is a minor version of the API. For example, if a client appends
            `api_hint=v1.0` to the query string, the hint provided is for major version
            1 and minor version 0.
          pattern: (v[0-9]+(\.[0-9]+)?)?
          title: Api Hint
          type: string
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/LinksResponse'
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Get Links
      tags:
      - Links
  /queries:
    get:
      description: '`GET /queries`


        Return overview of all (active) queries.'
      operationId: get_queries_queries_get
      parameters:
      - description: A filter string, in the format described in section API Filtering
          Format Specification of the specification.
        in: query
        name: filter
        required: false
        schema:
          default: ''
          description: A filter string, in the format described in section API Filtering
            Format Specification of the specification.
          title: Filter
          type: string
      - description: 'The output format requested (see section Response Format).

          Defaults to the format string ''json'', which specifies the standard output
          format described in this specification.

          Example: `http://example.com/v1/structures?response_format=xml`'
        in: query
        name: response_format
        required: false
        schema:
          default: json
          description: 'The output format requested (see section Response Format).

            Defaults to the format string ''json'', which specifies the standard output
            format described in this specification.

            Example: `http://example.com/v1/structures?response_format=xml`'
          title: Response Format
          type: string
      - description: 'An email address of the user making the request.

          The email SHOULD be that of a person and not an automatic system.

          Example: `http://example.com/v1/structures?email_address=user@example.com`'
        in: query
        name: email_address
        required: false
        schema:
          default: ''
          description: 'An email address of the user making the request.

            The email SHOULD be that of a person and not an automatic system.

            Example: `http://example.com/v1/structures?email_address=user@example.com`'
          format: email
          title: Email Address
          type: string
      - description: 'A comma-delimited set of fields to be provided in the output.

          If provided, these fields MUST be returned along with the REQUIRED fields.

          Other OPTIONAL fields MUST NOT be returned when this parameter is present.

          Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`'
        in: query
        name: response_fields
        required: false
        schema:
          default: ''
          description: 'A comma-delimited set of fields to be provided in the output.

            If provided, these fields MUST be returned along with the REQUIRED fields.

            Other OPTIONAL fields MUST NOT be returned when this parameter is present.

            Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`'
          pattern: ([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?
          title: Response Fields
          type: string
      - description: 'If supporting sortable queries, an implementation MUST use the
          `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).


          An implementation MAY support multiple sort fields for a single query.

          If it does, it again MUST conform to the JSON API 1.0 specification.


          If an implementation supports sorting for an entry listing endpoint, then
          the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>`
          in its `data.properties.<fieldname>` response value that can be used for
          sorting, the key `sortable` with value `true`.

          If a field name under an entry listing endpoint supporting sorting cannot
          be used for sorting, the server MUST either leave out the `sortable` key
          or set it equal to `false` for the specific field name.

          The set of field names, with `sortable` equal to `true` are allowed to be
          used in the "sort fields" list according to its definition in the JSON API
          1.0 specification.

          The field `sortable` is in addition to each property description and other
          OPTIONAL fields.

          An example is shown in the section Entry Listing Info Endpoints.'
        in: query
        name: sort
        required: false
        schema:
          default: ''
          description: 'If supporting sortable queries, an implementation MUST use
            the `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).


            An implementation MAY support multiple sort fields for a single query.

            If it does, it again MUST conform to the JSON API 1.0 specification.


            If an implementation supports sorting for an entry listing endpoint, then
            the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>`
            in its `data.properties.<fieldname>` response value that can be used for
            sorting, the key `sortable` with value `true`.

            If a field name under an entry listing endpoint supporting sorting cannot
            be used for sorting, the server MUST either leave out the `sortable` key
            or set it equal to `false` for the specific field name.

            The set of field names, with `sortable` equal to `true` are allowed to
            be used in the "sort fields" list according to its definition in the JSON
            API 1.0 specification.

            The field `sortable` is in addition to each property description and other
            OPTIONAL fields.

            An example is shown in the section Entry Listing Info Endpoints.'
          pattern: ([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?
          title: Sort
          type: string
      - description: 'Sets a numerical limit on the number of entries returned.

          See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).

          The API implementation MUST return no more than the number specified.

          It MAY return fewer.

          The database MAY have a maximum limit and not accept larger numbers (in
          which case an error code -- 403 Forbidden -- MUST be returned).

          The default limit value is up to the API implementation to decide.

          Example: `http://example.com/optimade/v1/structures?page_limit=100`'
        in: query
        name: page_limit
        required: false
        schema:
          default: 20
          description: 'Sets a numerical limit on the number of entries returned.

            See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).

            The API implementation MUST return no more than the number specified.

            It MAY return fewer.

            The database MAY have a maximum limit and not accept larger numbers (in
            which case an error code -- 403 Forbidden -- MUST be returned).

            The default limit value is up to the API implementation to decide.

            Example: `http://example.com/optimade/v1/structures?page_limit=100`'
          minimum: 0.0
          title: Page Limit
          type: integer
      - description: 'RECOMMENDED for use with _offset-based_ pagination: using `page_offset`
          and `page_limit` is RECOMMENDED.

          Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.'
        in: query
        name: page_offset
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _offset-based_ pagination: using
            `page_offset` and `page_limit` is RECOMMENDED.

            Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.'
          minimum: 0.0
          title: Page Offset
          type: integer
      - description: 'RECOMMENDED for use with _page-based_ pagination: using `page_number`
          and `page_limit` is RECOMMENDED.

          It is RECOMMENDED that the first page has number 1, i.e., that `page_number`
          is 1-based.

          Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.'
        in: query
        name: page_number
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _page-based_ pagination: using `page_number`
            and `page_limit` is RECOMMENDED.

            It is RECOMMENDED that the first page has number 1, i.e., that `page_number`
            is 1-based.

            Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.'
          minimum: 0.0
          title: Page Number
          type: integer
      - description: 'RECOMMENDED for use with _cursor-based_ pagination: using `page_cursor`
          and `page_limit` is RECOMMENDED.'
        in: query
        name: page_cursor
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _cursor-based_ pagination: using
            `page_cursor` and `page_limit` is RECOMMENDED.'
          minimum: 0.0
          title: Page Cursor
          type: integer
      - description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
          and `page_limit` is RECOMMENDED.

          Example: Fetch up to 100 structures above sort-field value 4000 (in this
          example, server chooses to fetch results sorted by increasing `id`, so `page_above`
          value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.'
        in: query
        name: page_above
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
            and `page_limit` is RECOMMENDED.

            Example: Fetch up to 100 structures above sort-field value 4000 (in this
            example, server chooses to fetch results sorted by increasing `id`, so
            `page_above` value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.'
          minimum: 0.0
          title: Page Above
          type: integer
      - description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
          and `page_limit` is RECOMMENDED.'
        in: query
        name: page_below
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
            and `page_limit` is RECOMMENDED.'
          minimum: 0.0
          title: Page Below
          type: integer
      - description: 'A server MAY implement the JSON API concept of returning [compound
          documents](https://jsonapi.org/format/1.0/#document-compound-documents)
          by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).


          All related resource objects MUST be returned as part of an array value
          for the top-level `included` field, see the section JSON Response Schema:
          Common Fields.


          The value of `include` MUST be a comma-separated list of "relationship paths",
          as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).

          If relationship paths are not supported, or a server is unable to identify
          a relationship path a `400 Bad Request` response MUST be made.


          The **default value** for `include` is `references`.

          This means `references` entries MUST always be included under the top-level
          field `included` as default, since a server assumes if `include` is not
          specified by a client in the request, it is still specified as `include=references`.

          Note, if a client explicitly specifies `include` and leaves out `references`,
          `references` resource objects MUST NOT be included under the top-level field
          `included`, as per the definition of `included`, see section JSON Response
          Schema: Common Fields.


          > **Note**: A query with the parameter `include` set to the empty string
          means no related resource objects are to be returned under the top-level
          field `included`.'
        in: query
        name: include
        required: false
        schema:
          default: references
          description: 'A server MAY implement the JSON API concept of returning [compound
            documents](https://jsonapi.org/format/1.0/#document-compound-documents)
            by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).


            All related resource objects MUST be returned as part of an array value
            for the top-level `included` field, see the section JSON Response Schema:
            Common Fields.


            The value of `include` MUST be a comma-separated list of "relationship
            paths", as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).

            If relationship paths are not supported, or a server is unable to identify
            a relationship path a `400 Bad Request` response MUST be made.


            The **default value** for `include` is `references`.

            This means `references` entries MUST always be included under the top-level
            field `included` as default, since a server assumes if `include` is not
            specified by a client in the request, it is still specified as `include=references`.

            Note, if a client explicitly specifies `include` and leaves out `references`,
            `references` resource objects MUST NOT be included under the top-level
            field `included`, as per the definition of `included`, see section JSON
            Response Schema: Common Fields.


            > **Note**: A query with the parameter `include` set to the empty string
            means no related resource objects are to be returned under the top-level
            field `included`.'
          title: Include
          type: string
      - description: If the client provides the parameter, the value SHOULD have the
          format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version and MINOR
          is a minor version of the API. For example, if a client appends `api_hint=v1.0`
          to the query string, the hint provided is for major version 1 and minor
          version 0.
        in: query
        name: api_hint
        required: false
        schema:
          default: ''
          description: If the client provides the parameter, the value SHOULD have
            the format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version
            and MINOR is a minor version of the API. For example, if a client appends
            `api_hint=v1.0` to the query string, the hint provided is for major version
            1 and minor version 0.
          pattern: (v[0-9]+(\.[0-9]+)?)?
          title: Api Hint
          type: string
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/QueriesResponse'
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Get Queries
      tags:
      - Queries
    post:
      description: '`POST /queries`


        Create or return existing gateway query according to `query`.'
      operationId: post_queries_queries_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryCreate'
        required: true
      responses:
        '202':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/QueriesResponseSingle'
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Post Queries
      tags:
      - Queries
  /queries/{query_id}:
    get:
      description: '`GET /queries/{query_id}`


        Return a single [`QueryResource`][optimade_gateway.models.queries.QueryResource].'
      operationId: get_query_queries__query_id__get
      parameters:
      - in: path
        name: query_id
        required: true
        schema:
          title: Query Id
          type: string
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/QueriesResponseSingle'
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Get Query
      tags:
      - Queries
  /search:
    get:
      description: "`GET /search`\n\nCoordinate a new OPTIMADE query in multiple databases\
        \ through a gateway:\n\n1. Create a [`Search`][optimade_gateway.models.search.Search]\
        \ `POST` data - calling\n    `POST /search`.\n1. Wait [`search_params.timeout`][optimade_gateway.queries.params.SearchQueryParams]\n\
        \    seconds before returning the query, if it has not finished before.\n\
        1. Return query - similar to `GET /queries/{query_id}`.\n\nThis endpoint works\
        \ similarly to `GET /queries/{query_id}`, where one passes the query\nparameters\
        \ directly in the URL, instead of first POSTing a query and then going to\
        \ its\nURL. Hence, a\n[`QueryResponseSingle`][optimade_gateway.models.responses.QueriesResponseSingle]\
        \ is\nthe standard response model for this endpoint.\n\nIf the timeout time\
        \ is reached and the query has not yet finished, the user is\nredirected to\
        \ the specific URL for the query.\n\nIf the `as_optimade` query parameter\
        \ is `True`, the response will be parseable as a\nstandard OPTIMADE entry\
        \ listing endpoint like, e.g., `/structures`.\nFor more information see the\n\
        [OPTIMADE specification](https://github.com/Materials-Consortia/OPTIMADE/blob/master/optimade.rst#entry-listing-endpoints)."
      operationId: get_search_search_get
      parameters:
      - description: Unique list of possible database IDs that are already known by
          the gateway. To be known they need to be registered with the gateway (currently
          not possible).
        in: query
        name: database_ids
        required: false
        schema:
          default: []
          description: Unique list of possible database IDs that are already known
            by the gateway. To be known they need to be registered with the gateway
            (currently not possible).
          items:
            type: string
          title: Database Ids
          type: array
          uniqueItems: true
      - description: A unique list of OPTIMADE base URLs. If a versioned base URL
          is supplied it will be used as is, as long as it represents a supported
          version. If an un-versioned base URL, standard version negotiation will
          be conducted to get the versioned base URL, which will be used as long as
          it represents a supported version.
        in: query
        name: optimade_urls
        required: false
        schema:
          default: []
          description: A unique list of OPTIMADE base URLs. If a versioned base URL
            is supplied it will be used as is, as long as it represents a supported
            version. If an un-versioned base URL, standard version negotiation will
            be conducted to get the versioned base URL, which will be used as long
            as it represents a supported version.
          items:
            format: uri
            maxLength: 65536
            minLength: 1
            type: string
          title: Optimade Urls
          type: array
          uniqueItems: true
      - description: The entry endpoint queried. According to the OPTIMADE specification,
          this is the same as the resource's type.
        in: query
        name: endpoint
        required: false
        schema:
          default: structures
          description: The entry endpoint queried. According to the OPTIMADE specification,
            this is the same as the resource's type.
          title: Endpoint
          type: string
      - description: Timeout time (in seconds) to wait for a query to finish before
          redirecting (*after* starting the query). Note, if the query has not finished
          after the timeout time, a redirection will still be performed, but to a
          zero-results page, which can be refreshed to get the finished query (once
          it has finished).
        in: query
        name: timeout
        required: false
        schema:
          default: 15
          description: Timeout time (in seconds) to wait for a query to finish before
            redirecting (*after* starting the query). Note, if the query has not finished
            after the timeout time, a redirection will still be performed, but to
            a zero-results page, which can be refreshed to get the finished query
            (once it has finished).
          title: Timeout
          type: integer
      - description: Return the response as a standard OPTIMADE entry listing endpoint
          response. Otherwise, the response will be based on the [`QueriesResponseSingle`][optimade_gateway.models.responses.QueriesResponseSingle]
          model.
        in: query
        name: as_optimade
        required: false
        schema:
          default: false
          description: Return the response as a standard OPTIMADE entry listing endpoint
            response. Otherwise, the response will be based on the [`QueriesResponseSingle`][optimade_gateway.models.responses.QueriesResponseSingle]
            model.
          title: As Optimade
          type: boolean
      - description: A filter string, in the format described in section API Filtering
          Format Specification of the specification.
        in: query
        name: filter
        required: false
        schema:
          default: ''
          description: A filter string, in the format described in section API Filtering
            Format Specification of the specification.
          title: Filter
          type: string
      - description: 'The output format requested (see section Response Format).

          Defaults to the format string ''json'', which specifies the standard output
          format described in this specification.

          Example: `http://example.com/v1/structures?response_format=xml`'
        in: query
        name: response_format
        required: false
        schema:
          default: json
          description: 'The output format requested (see section Response Format).

            Defaults to the format string ''json'', which specifies the standard output
            format described in this specification.

            Example: `http://example.com/v1/structures?response_format=xml`'
          title: Response Format
          type: string
      - description: 'An email address of the user making the request.

          The email SHOULD be that of a person and not an automatic system.

          Example: `http://example.com/v1/structures?email_address=user@example.com`'
        in: query
        name: email_address
        required: false
        schema:
          default: ''
          description: 'An email address of the user making the request.

            The email SHOULD be that of a person and not an automatic system.

            Example: `http://example.com/v1/structures?email_address=user@example.com`'
          format: email
          title: Email Address
          type: string
      - description: 'A comma-delimited set of fields to be provided in the output.

          If provided, these fields MUST be returned along with the REQUIRED fields.

          Other OPTIONAL fields MUST NOT be returned when this parameter is present.

          Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`'
        in: query
        name: response_fields
        required: false
        schema:
          default: ''
          description: 'A comma-delimited set of fields to be provided in the output.

            If provided, these fields MUST be returned along with the REQUIRED fields.

            Other OPTIONAL fields MUST NOT be returned when this parameter is present.

            Example: `http://example.com/v1/structures?response_fields=last_modified,nsites`'
          pattern: ([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?
          title: Response Fields
          type: string
      - description: 'If supporting sortable queries, an implementation MUST use the
          `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).


          An implementation MAY support multiple sort fields for a single query.

          If it does, it again MUST conform to the JSON API 1.0 specification.


          If an implementation supports sorting for an entry listing endpoint, then
          the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>`
          in its `data.properties.<fieldname>` response value that can be used for
          sorting, the key `sortable` with value `true`.

          If a field name under an entry listing endpoint supporting sorting cannot
          be used for sorting, the server MUST either leave out the `sortable` key
          or set it equal to `false` for the specific field name.

          The set of field names, with `sortable` equal to `true` are allowed to be
          used in the "sort fields" list according to its definition in the JSON API
          1.0 specification.

          The field `sortable` is in addition to each property description and other
          OPTIONAL fields.

          An example is shown in the section Entry Listing Info Endpoints.'
        in: query
        name: sort
        required: false
        schema:
          default: ''
          description: 'If supporting sortable queries, an implementation MUST use
            the `sort` query parameter with format as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-sorting).


            An implementation MAY support multiple sort fields for a single query.

            If it does, it again MUST conform to the JSON API 1.0 specification.


            If an implementation supports sorting for an entry listing endpoint, then
            the `/info/<entries>` endpoint MUST include, for each field name `<fieldname>`
            in its `data.properties.<fieldname>` response value that can be used for
            sorting, the key `sortable` with value `true`.

            If a field name under an entry listing endpoint supporting sorting cannot
            be used for sorting, the server MUST either leave out the `sortable` key
            or set it equal to `false` for the specific field name.

            The set of field names, with `sortable` equal to `true` are allowed to
            be used in the "sort fields" list according to its definition in the JSON
            API 1.0 specification.

            The field `sortable` is in addition to each property description and other
            OPTIONAL fields.

            An example is shown in the section Entry Listing Info Endpoints.'
          pattern: ([a-z_][a-z_0-9]*(,[a-z_][a-z_0-9]*)*)?
          title: Sort
          type: string
      - description: 'Sets a numerical limit on the number of entries returned.

          See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).

          The API implementation MUST return no more than the number specified.

          It MAY return fewer.

          The database MAY have a maximum limit and not accept larger numbers (in
          which case an error code -- 403 Forbidden -- MUST be returned).

          The default limit value is up to the API implementation to decide.

          Example: `http://example.com/optimade/v1/structures?page_limit=100`'
        in: query
        name: page_limit
        required: false
        schema:
          default: 20
          description: 'Sets a numerical limit on the number of entries returned.

            See [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-pagination).

            The API implementation MUST return no more than the number specified.

            It MAY return fewer.

            The database MAY have a maximum limit and not accept larger numbers (in
            which case an error code -- 403 Forbidden -- MUST be returned).

            The default limit value is up to the API implementation to decide.

            Example: `http://example.com/optimade/v1/structures?page_limit=100`'
          minimum: 0.0
          title: Page Limit
          type: integer
      - description: 'RECOMMENDED for use with _offset-based_ pagination: using `page_offset`
          and `page_limit` is RECOMMENDED.

          Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.'
        in: query
        name: page_offset
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _offset-based_ pagination: using
            `page_offset` and `page_limit` is RECOMMENDED.

            Example: Skip 50 structures and fetch up to 100: `/structures?page_offset=50&page_limit=100`.'
          minimum: 0.0
          title: Page Offset
          type: integer
      - description: 'RECOMMENDED for use with _page-based_ pagination: using `page_number`
          and `page_limit` is RECOMMENDED.

          It is RECOMMENDED that the first page has number 1, i.e., that `page_number`
          is 1-based.

          Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.'
        in: query
        name: page_number
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _page-based_ pagination: using `page_number`
            and `page_limit` is RECOMMENDED.

            It is RECOMMENDED that the first page has number 1, i.e., that `page_number`
            is 1-based.

            Example: Fetch page 2 of up to 50 structures per page: `/structures?page_number=2&page_limit=50`.'
          minimum: 0.0
          title: Page Number
          type: integer
      - description: 'RECOMMENDED for use with _cursor-based_ pagination: using `page_cursor`
          and `page_limit` is RECOMMENDED.'
        in: query
        name: page_cursor
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _cursor-based_ pagination: using
            `page_cursor` and `page_limit` is RECOMMENDED.'
          minimum: 0.0
          title: Page Cursor
          type: integer
      - description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
          and `page_limit` is RECOMMENDED.

          Example: Fetch up to 100 structures above sort-field value 4000 (in this
          example, server chooses to fetch results sorted by increasing `id`, so `page_above`
          value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.'
        in: query
        name: page_above
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
            and `page_limit` is RECOMMENDED.

            Example: Fetch up to 100 structures above sort-field value 4000 (in this
            example, server chooses to fetch results sorted by increasing `id`, so
            `page_above` value refers to an `id` value): `/structures?page_above=4000&page_limit=100`.'
          minimum: 0.0
          title: Page Above
          type: integer
      - description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
          and `page_limit` is RECOMMENDED.'
        in: query
        name: page_below
        required: false
        schema:
          default: 0
          description: 'RECOMMENDED for use with _value-based_ pagination: using `page_above`/`page_below`
            and `page_limit` is RECOMMENDED.'
          minimum: 0.0
          title: Page Below
          type: integer
      - description: 'A server MAY implement the JSON API concept of returning [compound
          documents](https://jsonapi.org/format/1.0/#document-compound-documents)
          by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).


          All related resource objects MUST be returned as part of an array value
          for the top-level `included` field, see the section JSON Response Schema:
          Common Fields.


          The value of `include` MUST be a comma-separated list of "relationship paths",
          as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).

          If relationship paths are not supported, or a server is unable to identify
          a relationship path a `400 Bad Request` response MUST be made.


          The **default value** for `include` is `references`.

          This means `references` entries MUST always be included under the top-level
          field `included` as default, since a server assumes if `include` is not
          specified by a client in the request, it is still specified as `include=references`.

          Note, if a client explicitly specifies `include` and leaves out `references`,
          `references` resource objects MUST NOT be included under the top-level field
          `included`, as per the definition of `included`, see section JSON Response
          Schema: Common Fields.


          > **Note**: A query with the parameter `include` set to the empty string
          means no related resource objects are to be returned under the top-level
          field `included`.'
        in: query
        name: include
        required: false
        schema:
          default: references
          description: 'A server MAY implement the JSON API concept of returning [compound
            documents](https://jsonapi.org/format/1.0/#document-compound-documents)
            by utilizing the `include` query parameter as specified by [JSON API 1.0](https://jsonapi.org/format/1.0/#fetching-includes).


            All related resource objects MUST be returned as part of an array value
            for the top-level `included` field, see the section JSON Response Schema:
            Common Fields.


            The value of `include` MUST be a comma-separated list of "relationship
            paths", as defined in the [JSON API](https://jsonapi.org/format/1.0/#fetching-includes).

            If relationship paths are not supported, or a server is unable to identify
            a relationship path a `400 Bad Request` response MUST be made.


            The **default value** for `include` is `references`.

            This means `references` entries MUST always be included under the top-level
            field `included` as default, since a server assumes if `include` is not
            specified by a client in the request, it is still specified as `include=references`.

            Note, if a client explicitly specifies `include` and leaves out `references`,
            `references` resource objects MUST NOT be included under the top-level
            field `included`, as per the definition of `included`, see section JSON
            Response Schema: Common Fields.


            > **Note**: A query with the parameter `include` set to the empty string
            means no related resource objects are to be returned under the top-level
            field `included`.'
          title: Include
          type: string
      - description: If the client provides the parameter, the value SHOULD have the
          format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version and MINOR
          is a minor version of the API. For example, if a client appends `api_hint=v1.0`
          to the query string, the hint provided is for major version 1 and minor
          version 0.
        in: query
        name: api_hint
        required: false
        schema:
          default: ''
          description: If the client provides the parameter, the value SHOULD have
            the format `vMAJOR` or `vMAJOR.MINOR`, where MAJOR is a major version
            and MINOR is a minor version of the API. For example, if a client appends
            `api_hint=v1.0` to the query string, the hint provided is for major version
            1 and minor version 0.
          pattern: (v[0-9]+(\.[0-9]+)?)?
          title: Api Hint
          type: string
      responses:
        '200':
          content:
            application/vnd.api+json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/QueriesResponseSingle'
                - $ref: '#/components/schemas/EntryResponseMany'
                - $ref: '#/components/schemas/ErrorResponse'
                title: Response Get Search Search Get
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Get Search
      tags:
      - Search
    post:
      description: "`POST /search`\n\nCoordinate a new OPTIMADE query in multiple\
        \ databases through a gateway:\n\n1. Search for gateway in DB using `optimade_urls`\
        \ and `database_ids`\n1. Create [`GatewayCreate`][optimade_gateway.models.gateways.GatewayCreate]\
        \ model\n1. `POST` gateway resource to get ID - using functionality of `POST\
        \ /gateways`\n1. Create new [Query][optimade_gateway.models.queries.QueryCreate]\
        \ resource\n1. `POST` Query resource - using functionality of `POST /queries`\n\
        1. Return `POST /queries` response -\n    [`QueriesResponseSingle`][optimade_gateway.models.responses.QueriesResponseSingle]"
      operationId: post_search_search_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Search'
        required: true
      responses:
        '202':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/QueriesResponseSingle'
          description: Successful Response
        '400':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '403':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Forbidden
        '404':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Found
        '422':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Unprocessable Entity
        '500':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Server Error
        '501':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        '553':
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Version Not Supported
      summary: Post Search
      tags:
      - Search
  /versions:
    get:
      description: Respond with the text/csv representation for the served versions.
      operationId: get_versions_versions_get
      responses:
        '200':
          content:
            text/csv; header=present:
              schema:
                type: string
          description: Successful Response
      summary: Get Versions
      tags:
      - Versions
servers:
- url: http://localhost:8000
