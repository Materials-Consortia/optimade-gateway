name: CD - Publish & Deploy

on:
  release:
    types:
    - published

env:
  PUBLISH_UPDATE_BRANCH: main
  GIT_USER_NAME: OPTIMADE Developers
  GIT_USER_EMAIL: "dev@optimade.org"

jobs:

  update-repo-and-release:
    name: Update CHANGELOG and documentation
    runs-on: ubuntu-latest
    if: github.repository == 'Materials-Consortia/optimade-gateway' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install Python dependencies
      run: |
        python -m pip install -U pip
        pip install -U setuptools
        pip install -U -e .[dev]

    - name: Update changelog
      uses: CharMixer/auto-changelog-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        release_branch: ${{ env.PUBLISH_UPDATE_BRANCH }}

    - name: Update documentation and version - Commit changes and update tag
      run: .github/utils/update_docs.sh

    - name: Update '${{ env.PUBLISH_UPDATE_BRANCH }}'
      uses: CasperWA/push-protected@v2
      with:
        token: ${{ secrets.RELEASE_PAT_CASPER }}
        branch: ${{ env.PUBLISH_UPDATE_BRANCH }}
        sleep: 15
        force: true
        tags: true

    - name: Get tagged versions
      run: echo "PREVIOUS_VERSION=$(git tag -l --sort -version:refname | sed -n 2p)" >> $GITHUB_ENV

    - name: Create release-specific changelog
      uses: CharMixer/auto-changelog-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        release_branch: ${{ env.PUBLISH_UPDATE_BRANCH }}
        since_tag: "${{ env.PREVIOUS_VERSION }}"
        output: "release_msg.md"

    - name: Update release description with changelog
      uses: softprops/action-gh-release@v1
      with:
        body_path: "release_msg.md"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # publish:
  #   name: Publish on PyPI
  #   needs: update-repo-and-release
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 2

  #   - name: Set up Python 3.8
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8

  #   - name: Install Python dependencies
  #     run: |
  #       python -m pip install -U pip
  #       pip install -U setuptools

  #   - name: Build source distribution
  #     run: python ./setup.py sdist

  #   - name: Publish package to PyPI
  #     uses: pypa/gh-action-pypi-publish@v1.4.2
  #     with:
  #       user: __token__
  #       password: ${{ secrets.PYPI_TOKEN }}

  docs:
    name: Deploy release documentation
    # needs: publish
    needs: update-repo-and-release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ env.PUBLISH_UPDATE_BRANCH }}

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install Python dependencies
      run: |
        python -m pip install -U pip
        pip install -U setuptools
        pip install -U -e .[docs]

    - name: Set git config
      run: |
        git config --global user.name "${{ env.GIT_USER_NAME }}"
        git config --global user.email "${{ env.GIT_USER_EMAIL }}"

    - name: Deploy documentation
      run: |
        git fetch origin -ftpP

        mike deploy --push --remote origin --branch test-mike --update-aliases --config-file mkdocs.yml ${GITHUB_REF#refs/tags/v} stable

        git fetch origin -ftpP
        mike deploy --push --remote origin --branch test-mike --update-aliases --config-file mkdocs.yml latest main
