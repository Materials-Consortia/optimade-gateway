name: CI/CD - New updates to 'main'

on:
  push:
    branches: [main]

jobs:

  update-dependabot-branch:
    name: Update permanent dependabot branch
    if: github.repository_owner == 'Materials-Consortia'
    runs-on: ubuntu-latest

    env:
      DEPENDABOT_BRANCH: ci/dependabot-updates
      GIT_USER_NAME: OPTIMADE Developers
      GIT_USER_EMAIL: "dev@optimade.org"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: ${{ env.DEPENDABOT_BRANCH }}
        fetch-depth: 0

    - name: Update '${{ env.DEPENDABOT_BRANCH }}'
      run: |
        git config --global user.name "${{ env.GIT_USER_NAME }}"
        git config --global user.email "${{ env.GIT_USER_EMAIL }}"

        git fetch origin
        git merge -m "Keep '${{ env.DEPENDABOT_BRANCH }}' up-to-date with 'main'" origin/main

    - name: Push to '${{ env.DEPENDABOT_BRANCH }}'
      uses: CasperWA/push-protected@v2
      with:
        token: ${{ secrets.RELEASE_PAT_CASPER }}
        branch: ${{ env.DEPENDABOT_BRANCH }}
        sleep: 15

  deploy-docs:
    name: Deploy `latest` documentation
    if: github.repository_owner == 'Materials-Consortia'
    runs-on: ubuntu-latest

    steps:
    - name: Release check
      run: |
        COMMIT_MSG="$(gh api /repos/${{ github.repository}}/commits/main --jq '.commit.message')"
        if [[ "${COMMIT_MSG}" =~ ^Release\ v.*\ -\ Changelog$ ]]; then
          # In a release - do not run this job !
          echo "RELEASE_RUN=true" >> $GITHUB_ENV
        else
          echo "RELEASE_RUN=false" >> $GITHUB_ENV
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout repository
      if: "! env.RELEASE_RUN"
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python 3.8
      if: "! env.RELEASE_RUN"
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      if: "! env.RELEASE_RUN"
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools wheel
        pip install -U -e .[docs]

    - name: Set up git user
      if: "! env.RELEASE_RUN"
      run: |
        git config --global user.name "OPTIMADE Developers"
        git config --global user.email "dev@optimade.org"

    - name: Check API Reference and landing page
      if: "! env.RELEASE_RUN"
      run: |
        invoke create-api-reference-docs --pre-clean
        invoke create-docs-index

        if [ -n "$(git status --porcelain docs/api_reference docs/index.md)" ]; then
          echo "The following files in the documentation have not been committed:"
          git status --porcelain docs/api_reference docs/index.md
          exit 1
        fi

    - name: Deploy documentation
      if: "! env.RELEASE_RUN"
      run: mike deploy --push --remote origin --branch test-mike --update-aliases --config-file mkdocs.yml latest main
